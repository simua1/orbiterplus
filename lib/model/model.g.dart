// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Product.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Product TABLE
class TableProduct extends SqfEntityTableBase {
  TableProduct() {
    // declare properties of EntityTable
    tableName = 'product';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('unique_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('product_type', DbType.text),
      SqfEntityFieldBase('sku', DbType.text),
      SqfEntityFieldBase('price', DbType.real),
      SqfEntityFieldBase('stock', DbType.real),
      SqfEntityFieldBase('unit_name', DbType.text),
      SqfEntityFieldBase('alert', DbType.real),
      SqfEntityFieldBase('expiry_period', DbType.text),
      SqfEntityFieldBase('expiry_period_type', DbType.text),
      SqfEntityFieldBase('weight', DbType.text),
      SqfEntityFieldBase('img', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('manufacturer', DbType.text),
      SqfEntityFieldBase('custom_field1', DbType.text),
      SqfEntityFieldBase('custom_field2', DbType.text),
      SqfEntityFieldBase('custom_field3', DbType.text),
      SqfEntityFieldBase('custom_field4', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProduct();
  }
}

// Variation TABLE
class TableVariation extends SqfEntityTableBase {
  TableVariation() {
    // declare properties of EntityTable
    tableName = 'variation';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('variation_id', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('sub_sku', DbType.text),
      SqfEntityFieldBase('price', DbType.real),
      SqfEntityFieldBase('stock', DbType.real),
      SqfEntityFieldBase('unit_name', DbType.text),
      SqfEntityFieldBase('alert', DbType.real),
      SqfEntityFieldBase('expiry_period', DbType.text),
      SqfEntityFieldBase('expiry_period_type', DbType.text),
      SqfEntityFieldBase('weight', DbType.text),
      SqfEntityFieldBase('img', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
      SqfEntityFieldRelationshipBase(
          TableProduct.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'productId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVariation();
  }
}

// Customer TABLE
class TableCustomer extends SqfEntityTableBase {
  TableCustomer() {
    // declare properties of EntityTable
    tableName = 'customer';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('unique_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('ref_id', DbType.integer, isUnique: true),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('prefix', DbType.text),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('firstname', DbType.text),
      SqfEntityFieldBase('middleName', DbType.text),
      SqfEntityFieldBase('surname', DbType.text),
      SqfEntityFieldBase('phone', DbType.text),
      SqfEntityFieldBase('mobile', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('addressLine1', DbType.text),
      SqfEntityFieldBase('addressLine2', DbType.text),
      SqfEntityFieldBase('city', DbType.text),
      SqfEntityFieldBase('state', DbType.text),
      SqfEntityFieldBase('shippingAddress', DbType.text),
      SqfEntityFieldBase('status', DbType.text),
      SqfEntityFieldBase('custom_field1', DbType.text),
      SqfEntityFieldBase('custom_field2', DbType.text),
      SqfEntityFieldBase('custom_field3', DbType.text),
      SqfEntityFieldBase('custom_field4', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCustomer();
  }
}

// Sale TABLE
class TableSale extends SqfEntityTableBase {
  TableSale() {
    // declare properties of EntityTable
    tableName = 'sale';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('unique_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('amountBeforeTax', DbType.real),
      SqfEntityFieldBase('taxAmount', DbType.real),
      SqfEntityFieldBase('totalAmount', DbType.real),
      SqfEntityFieldBase('amountReceived', DbType.real),
      SqfEntityFieldBase('changeGiven', DbType.real),
      SqfEntityFieldBase('discount', DbType.real),
      SqfEntityFieldBase('taxLabel', DbType.text),
      SqfEntityFieldBase('discountLabel', DbType.text),
      SqfEntityFieldBase('paymentMethod', DbType.text),
      SqfEntityFieldBase('status', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
      SqfEntityFieldRelationshipBase(
          TableCustomer.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'customerId',
          defaultValue: 0),
      SqfEntityFieldRelationshipBase(TableTax.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'taxId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSale();
  }
}

// Sale_item TABLE
class TableSale_item extends SqfEntityTableBase {
  TableSale_item() {
    // declare properties of EntityTable
    tableName = 'sale_item';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('quantity', DbType.real),
      SqfEntityFieldRelationshipBase(
          TableProduct.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'productId',
          defaultValue: 0),
      SqfEntityFieldRelationshipBase(TableSale.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'saleId',
          defaultValue: 0),
      SqfEntityFieldRelationshipBase(
          TableVariation.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'variationId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSale_item();
  }
}

// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('unique_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('username', DbType.text),
      SqfEntityFieldBase('password', DbType.text),
      SqfEntityFieldBase('access_token', DbType.text),
      SqfEntityFieldBase('refresh_token', DbType.text),
      SqfEntityFieldBase('access_token_expiry', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('firstname', DbType.text),
      SqfEntityFieldBase('surname', DbType.text),
      SqfEntityFieldBase('mobile', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('user_type', DbType.text),
      SqfEntityFieldBase('max_sales_discount_percent', DbType.real),
      SqfEntityFieldBase('allow_login', DbType.text),
      SqfEntityFieldBase('status', DbType.text),
      SqfEntityFieldBase('business_name', DbType.text),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('default_location_id', DbType.integer),
      SqfEntityFieldBase('logo', DbType.text),
      SqfEntityFieldBase('sell_price_tax', DbType.text),
      SqfEntityFieldBase('tax1_id', DbType.integer),
      SqfEntityFieldBase('tax1_label', DbType.text),
      SqfEntityFieldBase('tax1_amount', DbType.real),
      SqfEntityFieldBase('tax2_id', DbType.integer),
      SqfEntityFieldBase('tax2_label', DbType.text),
      SqfEntityFieldBase('tax2_amount', DbType.real),
      SqfEntityFieldBase('custom_field1', DbType.text),
      SqfEntityFieldBase('custom_field2', DbType.text),
      SqfEntityFieldBase('custom_field3', DbType.text),
      SqfEntityFieldBase('custom_field4', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}

// Location TABLE
class TableLocation extends SqfEntityTableBase {
  TableLocation() {
    // declare properties of EntityTable
    tableName = 'location';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('location_id', DbType.text),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('address', DbType.text),
      SqfEntityFieldBase('country', DbType.text),
      SqfEntityFieldBase('state', DbType.text),
      SqfEntityFieldBase('city', DbType.text),
      SqfEntityFieldBase('mobile', DbType.text),
      SqfEntityFieldBase('phone', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('website', DbType.text),
      SqfEntityFieldBase('featured_products', DbType.text),
      SqfEntityFieldBase('custom_field1', DbType.text),
      SqfEntityFieldBase('custom_field2', DbType.text),
      SqfEntityFieldBase('custom_field3', DbType.text),
      SqfEntityFieldBase('custom_field4', DbType.text),
      SqfEntityFieldBase('payment_methods', DbType.text),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
      SqfEntityFieldRelationshipBase(TableUser.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'userId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocation();
  }
}

// Tax TABLE
class TableTax extends SqfEntityTableBase {
  TableTax() {
    // declare properties of EntityTable
    tableName = 'tax';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('ref_id', DbType.integer,
          isUnique: true, isIndex: true),
      SqfEntityFieldBase('business_id', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('amount', DbType.real),
      SqfEntityFieldBase('dateAdded', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateUpdated', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dateSynced', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isSynced', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('isCloudActive', DbType.bool, defaultValue: true),
      SqfEntityFieldRelationshipBase(TableUser.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'userId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTax();
  }
}
// END TABLES

// BEGIN SEQUENCES
// salesIdentity SEQUENCE
class SequenceSalesidentitySequence extends SqfEntitySequenceBase {
  SequenceSalesidentitySequence() {
    sequenceName = 'salesIdentity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 1101110001; /* optional. default is 0 */
    super.init();
  }
  static SequenceSalesidentitySequence? _instance;
  static SequenceSalesidentitySequence get getInstance {
    return _instance = _instance ?? SequenceSalesidentitySequence();
  }
}

// productIdentity SEQUENCE
class SequenceProductidentitySequence extends SqfEntitySequenceBase {
  SequenceProductidentitySequence() {
    sequenceName = 'productIdentity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 2101110001; /* optional. default is 0 */
    super.init();
  }
  static SequenceProductidentitySequence? _instance;
  static SequenceProductidentitySequence get getInstance {
    return _instance = _instance ?? SequenceProductidentitySequence();
  }
}

// customerIdentity SEQUENCE
class SequenceCustomeridentitySequence extends SqfEntitySequenceBase {
  SequenceCustomeridentitySequence() {
    sequenceName = 'customerIdentity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 3101110001; /* optional. default is 0 */
    super.init();
  }
  static SequenceCustomeridentitySequence? _instance;
  static SequenceCustomeridentitySequence get getInstance {
    return _instance = _instance ?? SequenceCustomeridentitySequence();
  }
}

// userIdentity SEQUENCE
class SequenceUseridentitySequence extends SqfEntitySequenceBase {
  SequenceUseridentitySequence() {
    sequenceName = 'userIdentity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 4101150001; /* optional. default is 0 */
    super.init();
  }
  static SequenceUseridentitySequence? _instance;
  static SequenceUseridentitySequence get getInstance {
    return _instance = _instance ?? SequenceUseridentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class OrbiterDbModel extends SqfEntityModelProvider {
  OrbiterDbModel() {
    databaseName = AppDbModel.databaseName;
    password = AppDbModel.password;
    dbVersion = AppDbModel.dbVersion;
    preSaveAction = AppDbModel.preSaveAction;
    logFunction = AppDbModel.logFunction;
    databaseTables = [
      TableProduct.getInstance,
      TableVariation.getInstance,
      TableCustomer.getInstance,
      TableSale.getInstance,
      TableSale_item.getInstance,
      TableUser.getInstance,
      TableLocation.getInstance,
      TableTax.getInstance,
    ];

    sequences = [
      SequenceSalesidentitySequence.getInstance,
      SequenceProductidentitySequence.getInstance,
      SequenceCustomeridentitySequence.getInstance,
      SequenceUseridentitySequence.getInstance,
    ];

    bundledDatabasePath = AppDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = AppDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Product
class Product extends TableBase {
  Product(
      {this.id,
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.name,
      this.product_type,
      this.sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.manufacturer,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Product.withFields(
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.name,
      this.product_type,
      this.sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.manufacturer,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  Product.withId(
      this.id,
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.name,
      this.product_type,
      this.sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.manufacturer,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Product.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['unique_id'] != null) {
      unique_id = int.tryParse(o['unique_id'].toString());
    }
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['product_type'] != null) {
      product_type = o['product_type'].toString();
    }
    if (o['sku'] != null) {
      sku = o['sku'].toString();
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    if (o['stock'] != null) {
      stock = double.tryParse(o['stock'].toString());
    }
    if (o['unit_name'] != null) {
      unit_name = o['unit_name'].toString();
    }
    if (o['alert'] != null) {
      alert = double.tryParse(o['alert'].toString());
    }
    if (o['expiry_period'] != null) {
      expiry_period = o['expiry_period'].toString();
    }
    if (o['expiry_period_type'] != null) {
      expiry_period_type = o['expiry_period_type'].toString();
    }
    if (o['weight'] != null) {
      weight = o['weight'].toString();
    }
    if (o['img'] != null) {
      img = o['img'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['manufacturer'] != null) {
      manufacturer = o['manufacturer'].toString();
    }
    if (o['custom_field1'] != null) {
      custom_field1 = o['custom_field1'].toString();
    }
    if (o['custom_field2'] != null) {
      custom_field2 = o['custom_field2'].toString();
    }
    if (o['custom_field3'] != null) {
      custom_field3 = o['custom_field3'].toString();
    }
    if (o['custom_field4'] != null) {
      custom_field4 = o['custom_field4'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Product)
  int? id;
  int? unique_id;
  int? ref_id;
  int? business_id;
  String? name;
  String? product_type;
  String? sku;
  double? price;
  double? stock;
  String? unit_name;
  double? alert;
  String? expiry_period;
  String? expiry_period_type;
  String? weight;
  String? img;
  String? description;
  String? manufacturer;
  String? custom_field1;
  String? custom_field2;
  String? custom_field3;
  String? custom_field4;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  bool? isDeleted;

  // end FIELDS (Product)

// COLLECTIONS & VIRTUALS (Product)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plVariations', 'plField2'..]) or so on..
  List<Variation>? plVariations;

  /// get Variation(s) filtered by id=productId
  VariationFilterBuilder? getVariations(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Variation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .productId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSale_items', 'plField2'..]) or so on..
  List<Sale_item>? plSale_items;

  /// get Sale_item(s) filtered by id=productId
  Sale_itemFilterBuilder? getSale_items(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sale_item()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .productId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Product)

  static const bool _softDeleteActivated = true;
  ProductManager? __mnProduct;

  ProductManager get _mnProduct {
    return __mnProduct = __mnProduct ?? ProductManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (product_type != null || !forView) {
      map['product_type'] = product_type;
    }
    if (sku != null || !forView) {
      map['sku'] = sku;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (stock != null || !forView) {
      map['stock'] = stock;
    }
    if (unit_name != null || !forView) {
      map['unit_name'] = unit_name;
    }
    if (alert != null || !forView) {
      map['alert'] = alert;
    }
    if (expiry_period != null || !forView) {
      map['expiry_period'] = expiry_period;
    }
    if (expiry_period_type != null || !forView) {
      map['expiry_period_type'] = expiry_period_type;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (img != null || !forView) {
      map['img'] = img;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (manufacturer != null || !forView) {
      map['manufacturer'] = manufacturer;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (product_type != null || !forView) {
      map['product_type'] = product_type;
    }
    if (sku != null || !forView) {
      map['sku'] = sku;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (stock != null || !forView) {
      map['stock'] = stock;
    }
    if (unit_name != null || !forView) {
      map['unit_name'] = unit_name;
    }
    if (alert != null || !forView) {
      map['alert'] = alert;
    }
    if (expiry_period != null || !forView) {
      map['expiry_period'] = expiry_period;
    }
    if (expiry_period_type != null || !forView) {
      map['expiry_period_type'] = expiry_period_type;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (img != null || !forView) {
      map['img'] = img;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (manufacturer != null || !forView) {
      map['manufacturer'] = manufacturer;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Product)
    if (!forQuery) {
      map['Variations'] = await getVariations()!.toMapList();
    }
    if (!forQuery) {
      map['Sale_items'] = await getSale_items()!.toMapList();
    }
// END COLLECTIONS (Product)

    return map;
  }

  /// This method returns Json String [Product]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Product]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      unique_id,
      ref_id,
      business_id,
      name,
      product_type,
      sku,
      price,
      stock,
      unit_name,
      alert,
      expiry_period,
      expiry_period_type,
      weight,
      img,
      description,
      manufacturer,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      unique_id,
      ref_id,
      business_id,
      name,
      product_type,
      sku,
      price,
      stock,
      unit_name,
      alert,
      expiry_period,
      expiry_period_type,
      weight,
      img,
      description,
      manufacturer,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  static Future<List<Product>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Product.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Product>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Product>[];
    try {
      objList = list
          .map((product) => Product.fromMap(product as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Product.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Product>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Product> objList = <Product>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Product.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plVariations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plVariations'))) {
          /*_loadedfields!.add('product.plVariations'); */ obj.plVariations =
              obj.plVariations ??
                  await obj.getVariations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('product.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('product.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Product by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Product] if exist, otherwise returns null
  Future<Product?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Product? obj;
    final data = await _mnProduct.getById([id]);
    if (data.length != 0) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plVariations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plVariations'))) {
          /*_loadedfields!.add('product.plVariations'); */ obj.plVariations =
              obj.plVariations ??
                  await obj.getVariations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('product.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('product.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Product) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await ProductidentitySequence().nextVal();

      id = await _mnProduct.insert(this, ignoreBatch);
    } else {
      await _mnProduct.update(this);
    }

    return id;
  }

  /// Saves the (Product) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await ProductidentitySequence().nextVal();

      id = await _mnProduct.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnProduct.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Product. Returns a new Primary Key value of Product

  /// <returns>Returns a new Primary Key value of Product
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Product> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Product> products,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in products) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < products.length; i++) {
        if (products[i].id == null) {
          products[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnProduct.rawInsert(
          'INSERT OR REPLACE INTO product (id, unique_id, ref_id, business_id, name, product_type, sku, price, stock, unit_name, alert, expiry_period, expiry_period_type, weight, img, description, manufacturer, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            unique_id,
            ref_id,
            business_id,
            name,
            product_type,
            sku,
            price,
            stock,
            unit_name,
            alert,
            expiry_period,
            expiry_period_type,
            weight,
            img,
            description,
            manufacturer,
            custom_field1,
            custom_field2,
            custom_field3,
            custom_field4,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Product id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Product id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Product Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Product>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Product> products,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnProduct.rawInsertAll(
        'INSERT OR REPLACE INTO product (id, unique_id, ref_id, business_id, name, product_type, sku, price, stock, unit_name, alert, expiry_period, expiry_period_type, weight, img, description, manufacturer, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        products,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Product

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Product invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Variation()
          .select()
          .productId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Sale_item()
          .select()
          .productId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnProduct
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Product

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Product invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Variation()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .productId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    if (recoverChilds) {
      result = await Sale_item()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .productId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  ProductFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ProductFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion product

// region ProductField
class ProductField extends FilterBase {
  ProductField(ProductFilterBuilder productFB) : super(productFB);

  @override
  ProductFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder isNull() {
    return super.isNull() as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ProductFilterBuilder;
  }

  @override
  ProductFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ProductFilterBuilder;
  }

  @override
  ProductField get not {
    return super.not as ProductField;
  }
}
// endregion ProductField

// region ProductFilterBuilder
class ProductFilterBuilder extends ConjunctionBase {
  ProductFilterBuilder(Product obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnProduct = obj._mnProduct;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ProductManager? _mnProduct;

  /// put the sql keyword 'AND'
  @override
  ProductFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ProductFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ProductFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ProductFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ProductFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ProductFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ProductFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ProductFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ProductFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ProductFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ProductFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ProductField _setField(ProductField? field, String colName, DbType dbtype) {
    return ProductField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ProductField? _id;
  ProductField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ProductField? _unique_id;
  ProductField get unique_id {
    return _unique_id = _setField(_unique_id, 'unique_id', DbType.integer);
  }

  ProductField? _ref_id;
  ProductField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  ProductField? _business_id;
  ProductField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  ProductField? _name;
  ProductField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ProductField? _product_type;
  ProductField get product_type {
    return _product_type =
        _setField(_product_type, 'product_type', DbType.text);
  }

  ProductField? _sku;
  ProductField get sku {
    return _sku = _setField(_sku, 'sku', DbType.text);
  }

  ProductField? _price;
  ProductField get price {
    return _price = _setField(_price, 'price', DbType.real);
  }

  ProductField? _stock;
  ProductField get stock {
    return _stock = _setField(_stock, 'stock', DbType.real);
  }

  ProductField? _unit_name;
  ProductField get unit_name {
    return _unit_name = _setField(_unit_name, 'unit_name', DbType.text);
  }

  ProductField? _alert;
  ProductField get alert {
    return _alert = _setField(_alert, 'alert', DbType.real);
  }

  ProductField? _expiry_period;
  ProductField get expiry_period {
    return _expiry_period =
        _setField(_expiry_period, 'expiry_period', DbType.text);
  }

  ProductField? _expiry_period_type;
  ProductField get expiry_period_type {
    return _expiry_period_type =
        _setField(_expiry_period_type, 'expiry_period_type', DbType.text);
  }

  ProductField? _weight;
  ProductField get weight {
    return _weight = _setField(_weight, 'weight', DbType.text);
  }

  ProductField? _img;
  ProductField get img {
    return _img = _setField(_img, 'img', DbType.text);
  }

  ProductField? _description;
  ProductField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  ProductField? _manufacturer;
  ProductField get manufacturer {
    return _manufacturer =
        _setField(_manufacturer, 'manufacturer', DbType.text);
  }

  ProductField? _custom_field1;
  ProductField get custom_field1 {
    return _custom_field1 =
        _setField(_custom_field1, 'custom_field1', DbType.text);
  }

  ProductField? _custom_field2;
  ProductField get custom_field2 {
    return _custom_field2 =
        _setField(_custom_field2, 'custom_field2', DbType.text);
  }

  ProductField? _custom_field3;
  ProductField get custom_field3 {
    return _custom_field3 =
        _setField(_custom_field3, 'custom_field3', DbType.text);
  }

  ProductField? _custom_field4;
  ProductField get custom_field4 {
    return _custom_field4 =
        _setField(_custom_field4, 'custom_field4', DbType.text);
  }

  ProductField? _dateAdded;
  ProductField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  ProductField? _dateUpdated;
  ProductField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  ProductField? _dateSynced;
  ProductField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  ProductField? _isSynced;
  ProductField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  ProductField? _isActive;
  ProductField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  ProductField? _isCloudActive;
  ProductField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  ProductField? _isDeleted;
  ProductField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Product> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Variation) according to DeleteRule.CASCADE
    final idListVariationBYproductId = toListPrimaryKeySQL(false);
    final resVariationBYproductId = await Variation()
        .select()
        .where('productId IN (${idListVariationBYproductId['sql']})',
            parameterValue: idListVariationBYproductId['args'])
        .delete(hardDelete);
    if (!resVariationBYproductId.success) {
      return resVariationBYproductId;
    }
// Delete sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYproductId = toListPrimaryKeySQL(false);
    final resSale_itemBYproductId = await Sale_item()
        .select()
        .where('productId IN (${idListSale_itemBYproductId['sql']})',
            parameterValue: idListSale_itemBYproductId['args'])
        .delete(hardDelete);
    if (!resSale_itemBYproductId.success) {
      return resSale_itemBYproductId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnProduct!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnProduct!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Product> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Product bulk invoked');
    // Recover sub records where in (Variation) according to DeleteRule.CASCADE
    final idListVariationBYproductId = toListPrimaryKeySQL(false);
    final resVariationBYproductId = await Variation()
        .select()
        .where('productId IN (${idListVariationBYproductId['sql']})',
            parameterValue: idListVariationBYproductId['args'])
        .update({'isDeleted': 0});
    if (!resVariationBYproductId.success) {
      return resVariationBYproductId;
    }
// Recover sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYproductId = toListPrimaryKeySQL(false);
    final resSale_itemBYproductId = await Sale_item()
        .select()
        .where('productId IN (${idListSale_itemBYproductId['sql']})',
            parameterValue: idListSale_itemBYproductId['args'])
        .update({'isDeleted': 0});
    if (!resSale_itemBYproductId.success) {
      return resSale_itemBYproductId;
    }
    return _mnProduct!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from product ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnProduct!.updateBatch(qparams, values);
  }

  /// This method always returns [Product] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Product?
  @override
  Future<Product?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnProduct!.toList(qparams);
    final data = await objFuture;
    Product? obj;
    if (data.isNotEmpty) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plVariations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plVariations'))) {
          /*_loadedfields!.add('product.plVariations'); */ obj.plVariations =
              obj.plVariations ??
                  await obj.getVariations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('product.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('product.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Product]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Product?
  @override
  Future<Product> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Product();
  }

  /// This method returns int. [Product]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? productCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final productsFuture = await _mnProduct!.toList(qparams);
    final int count = productsFuture[0]['CNT'] as int;
    if (productCount != null) {
      productCount(count);
    }
    return count;
  }

  /// This method returns List<Product> [Product]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Product>
  @override
  Future<List<Product>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Product> productsData = await Product.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return productsData;
  }

  /// This method returns Json String [Product]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Product]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Product]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnProduct!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Product]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM product WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnProduct!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Product]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnProduct!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Product.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnProduct!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProductFilterBuilder

// region ProductFields
class ProductFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUnique_id;
  static TableField get unique_id {
    return _fUnique_id = _fUnique_id ??
        SqlSyntax.setField(_fUnique_id, 'unique_id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fProduct_type;
  static TableField get product_type {
    return _fProduct_type = _fProduct_type ??
        SqlSyntax.setField(_fProduct_type, 'product_type', DbType.text);
  }

  static TableField? _fSku;
  static TableField get sku {
    return _fSku = _fSku ?? SqlSyntax.setField(_fSku, 'sku', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField? _fStock;
  static TableField get stock {
    return _fStock =
        _fStock ?? SqlSyntax.setField(_fStock, 'stock', DbType.real);
  }

  static TableField? _fUnit_name;
  static TableField get unit_name {
    return _fUnit_name = _fUnit_name ??
        SqlSyntax.setField(_fUnit_name, 'unit_name', DbType.text);
  }

  static TableField? _fAlert;
  static TableField get alert {
    return _fAlert =
        _fAlert ?? SqlSyntax.setField(_fAlert, 'alert', DbType.real);
  }

  static TableField? _fExpiry_period;
  static TableField get expiry_period {
    return _fExpiry_period = _fExpiry_period ??
        SqlSyntax.setField(_fExpiry_period, 'expiry_period', DbType.text);
  }

  static TableField? _fExpiry_period_type;
  static TableField get expiry_period_type {
    return _fExpiry_period_type = _fExpiry_period_type ??
        SqlSyntax.setField(
            _fExpiry_period_type, 'expiry_period_type', DbType.text);
  }

  static TableField? _fWeight;
  static TableField get weight {
    return _fWeight =
        _fWeight ?? SqlSyntax.setField(_fWeight, 'weight', DbType.text);
  }

  static TableField? _fImg;
  static TableField get img {
    return _fImg = _fImg ?? SqlSyntax.setField(_fImg, 'img', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fManufacturer;
  static TableField get manufacturer {
    return _fManufacturer = _fManufacturer ??
        SqlSyntax.setField(_fManufacturer, 'manufacturer', DbType.text);
  }

  static TableField? _fCustom_field1;
  static TableField get custom_field1 {
    return _fCustom_field1 = _fCustom_field1 ??
        SqlSyntax.setField(_fCustom_field1, 'custom_field1', DbType.text);
  }

  static TableField? _fCustom_field2;
  static TableField get custom_field2 {
    return _fCustom_field2 = _fCustom_field2 ??
        SqlSyntax.setField(_fCustom_field2, 'custom_field2', DbType.text);
  }

  static TableField? _fCustom_field3;
  static TableField get custom_field3 {
    return _fCustom_field3 = _fCustom_field3 ??
        SqlSyntax.setField(_fCustom_field3, 'custom_field3', DbType.text);
  }

  static TableField? _fCustom_field4;
  static TableField get custom_field4 {
    return _fCustom_field4 = _fCustom_field4 ??
        SqlSyntax.setField(_fCustom_field4, 'custom_field4', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ProductFields

//region ProductManager
class ProductManager extends SqfEntityProvider {
  ProductManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'product';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ProductManager
// region Variation
class Variation extends TableBase {
  Variation(
      {this.id,
      this.ref_id,
      this.variation_id,
      this.name,
      this.sub_sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.productId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Variation.withFields(
      this.ref_id,
      this.variation_id,
      this.name,
      this.sub_sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.productId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Variation.withId(
      this.id,
      this.ref_id,
      this.variation_id,
      this.name,
      this.sub_sku,
      this.price,
      this.stock,
      this.unit_name,
      this.alert,
      this.expiry_period,
      this.expiry_period_type,
      this.weight,
      this.img,
      this.description,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.productId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Variation.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['variation_id'] != null) {
      variation_id = int.tryParse(o['variation_id'].toString());
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['sub_sku'] != null) {
      sub_sku = o['sub_sku'].toString();
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    if (o['stock'] != null) {
      stock = double.tryParse(o['stock'].toString());
    }
    if (o['unit_name'] != null) {
      unit_name = o['unit_name'].toString();
    }
    if (o['alert'] != null) {
      alert = double.tryParse(o['alert'].toString());
    }
    if (o['expiry_period'] != null) {
      expiry_period = o['expiry_period'].toString();
    }
    if (o['expiry_period_type'] != null) {
      expiry_period_type = o['expiry_period_type'].toString();
    }
    if (o['weight'] != null) {
      weight = o['weight'].toString();
    }
    if (o['img'] != null) {
      img = o['img'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    productId = int.tryParse(o['productId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plProduct = o['product'] != null
        ? Product.fromMap(o['product'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Variation)
  int? id;
  int? ref_id;
  int? variation_id;
  String? name;
  String? sub_sku;
  double? price;
  double? stock;
  String? unit_name;
  double? alert;
  String? expiry_period;
  String? expiry_period_type;
  String? weight;
  String? img;
  String? description;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  int? productId;
  bool? isDeleted;

  // end FIELDS (Variation)

// RELATIONSHIPS (Variation)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plProduct', 'plField2'..]) or so on..
  Product? plProduct;

  /// get Product By ProductId
  Future<Product?> getProduct(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Product().getById(productId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Variation)

// COLLECTIONS & VIRTUALS (Variation)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSale_items', 'plField2'..]) or so on..
  List<Sale_item>? plSale_items;

  /// get Sale_item(s) filtered by id=variationId
  Sale_itemFilterBuilder? getSale_items(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sale_item()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .variationId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Variation)

  static const bool _softDeleteActivated = true;
  VariationManager? __mnVariation;

  VariationManager get _mnVariation {
    return __mnVariation = __mnVariation ?? VariationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (variation_id != null || !forView) {
      map['variation_id'] = variation_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (sub_sku != null || !forView) {
      map['sub_sku'] = sub_sku;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (stock != null || !forView) {
      map['stock'] = stock;
    }
    if (unit_name != null || !forView) {
      map['unit_name'] = unit_name;
    }
    if (alert != null || !forView) {
      map['alert'] = alert;
    }
    if (expiry_period != null || !forView) {
      map['expiry_period'] = expiry_period;
    }
    if (expiry_period_type != null || !forView) {
      map['expiry_period_type'] = expiry_period_type;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (img != null || !forView) {
      map['img'] = img;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    } else if (productId != null || !forView) {
      map['productId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (variation_id != null || !forView) {
      map['variation_id'] = variation_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (sub_sku != null || !forView) {
      map['sub_sku'] = sub_sku;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (stock != null || !forView) {
      map['stock'] = stock;
    }
    if (unit_name != null || !forView) {
      map['unit_name'] = unit_name;
    }
    if (alert != null || !forView) {
      map['alert'] = alert;
    }
    if (expiry_period != null || !forView) {
      map['expiry_period'] = expiry_period;
    }
    if (expiry_period_type != null || !forView) {
      map['expiry_period_type'] = expiry_period_type;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (img != null || !forView) {
      map['img'] = img;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    } else if (productId != null || !forView) {
      map['productId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Variation)
    if (!forQuery) {
      map['Sale_items'] = await getSale_items()!.toMapList();
    }
// END COLLECTIONS (Variation)

    return map;
  }

  /// This method returns Json String [Variation]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Variation]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      ref_id,
      variation_id,
      name,
      sub_sku,
      price,
      stock,
      unit_name,
      alert,
      expiry_period,
      expiry_period_type,
      weight,
      img,
      description,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      productId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      ref_id,
      variation_id,
      name,
      sub_sku,
      price,
      stock,
      unit_name,
      alert,
      expiry_period,
      expiry_period_type,
      weight,
      img,
      description,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      productId,
      isDeleted
    ];
  }

  static Future<List<Variation>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Variation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Variation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Variation>[];
    try {
      objList = list
          .map((variation) =>
              Variation.fromMap(variation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Variation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Variation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Variation> objList = <Variation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Variation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('variation.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('variation.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Variation by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Variation] if exist, otherwise returns null
  Future<Variation?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Variation? obj;
    final data = await _mnVariation.getById([id]);
    if (data.length != 0) {
      obj = Variation.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('variation.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('variation.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Variation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnVariation.insert(this, ignoreBatch);
    } else {
      await _mnVariation.update(this);
    }

    return id;
  }

  /// Saves the (Variation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnVariation.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnVariation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Variation. Returns a new Primary Key value of Variation

  /// <returns>Returns a new Primary Key value of Variation
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Variation> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Variation> variations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in variations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < variations.length; i++) {
        if (variations[i].id == null) {
          variations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnVariation.rawInsert(
          'INSERT OR REPLACE INTO variation (id, ref_id, variation_id, name, sub_sku, price, stock, unit_name, alert, expiry_period, expiry_period_type, weight, img, description, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, productId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            ref_id,
            variation_id,
            name,
            sub_sku,
            price,
            stock,
            unit_name,
            alert,
            expiry_period,
            expiry_period_type,
            weight,
            img,
            description,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            productId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Variation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Variation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Variation Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Variation>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Variation> variations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnVariation.rawInsertAll(
        'INSERT OR REPLACE INTO variation (id, ref_id, variation_id, name, sub_sku, price, stock, unit_name, alert, expiry_period, expiry_period_type, weight, img, description, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, productId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        variations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Variation

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Variation invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Sale_item()
          .select()
          .variationId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnVariation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnVariation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Variation

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Variation invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Sale_item()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .variationId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnVariation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  VariationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return VariationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  VariationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return VariationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    productId = productId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion variation

// region VariationField
class VariationField extends FilterBase {
  VariationField(VariationFilterBuilder variationFB) : super(variationFB);

  @override
  VariationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder isNull() {
    return super.isNull() as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as VariationFilterBuilder;
  }

  @override
  VariationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as VariationFilterBuilder;
  }

  @override
  VariationField get not {
    return super.not as VariationField;
  }
}
// endregion VariationField

// region VariationFilterBuilder
class VariationFilterBuilder extends ConjunctionBase {
  VariationFilterBuilder(Variation obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnVariation = obj._mnVariation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  VariationManager? _mnVariation;

  /// put the sql keyword 'AND'
  @override
  VariationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  VariationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  VariationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  VariationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  VariationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  VariationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  VariationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  VariationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  VariationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  VariationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  VariationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  VariationField _setField(
      VariationField? field, String colName, DbType dbtype) {
    return VariationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  VariationField? _id;
  VariationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  VariationField? _ref_id;
  VariationField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  VariationField? _variation_id;
  VariationField get variation_id {
    return _variation_id =
        _setField(_variation_id, 'variation_id', DbType.integer);
  }

  VariationField? _name;
  VariationField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  VariationField? _sub_sku;
  VariationField get sub_sku {
    return _sub_sku = _setField(_sub_sku, 'sub_sku', DbType.text);
  }

  VariationField? _price;
  VariationField get price {
    return _price = _setField(_price, 'price', DbType.real);
  }

  VariationField? _stock;
  VariationField get stock {
    return _stock = _setField(_stock, 'stock', DbType.real);
  }

  VariationField? _unit_name;
  VariationField get unit_name {
    return _unit_name = _setField(_unit_name, 'unit_name', DbType.text);
  }

  VariationField? _alert;
  VariationField get alert {
    return _alert = _setField(_alert, 'alert', DbType.real);
  }

  VariationField? _expiry_period;
  VariationField get expiry_period {
    return _expiry_period =
        _setField(_expiry_period, 'expiry_period', DbType.text);
  }

  VariationField? _expiry_period_type;
  VariationField get expiry_period_type {
    return _expiry_period_type =
        _setField(_expiry_period_type, 'expiry_period_type', DbType.text);
  }

  VariationField? _weight;
  VariationField get weight {
    return _weight = _setField(_weight, 'weight', DbType.text);
  }

  VariationField? _img;
  VariationField get img {
    return _img = _setField(_img, 'img', DbType.text);
  }

  VariationField? _description;
  VariationField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  VariationField? _dateAdded;
  VariationField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  VariationField? _dateUpdated;
  VariationField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  VariationField? _dateSynced;
  VariationField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  VariationField? _isSynced;
  VariationField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  VariationField? _isActive;
  VariationField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  VariationField? _isCloudActive;
  VariationField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  VariationField? _productId;
  VariationField get productId {
    return _productId = _setField(_productId, 'productId', DbType.integer);
  }

  VariationField? _isDeleted;
  VariationField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Variation> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYvariationId = toListPrimaryKeySQL(false);
    final resSale_itemBYvariationId = await Sale_item()
        .select()
        .where('variationId IN (${idListSale_itemBYvariationId['sql']})',
            parameterValue: idListSale_itemBYvariationId['args'])
        .delete(hardDelete);
    if (!resSale_itemBYvariationId.success) {
      return resSale_itemBYvariationId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnVariation!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnVariation!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Variation> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Variation bulk invoked');
    // Recover sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYvariationId = toListPrimaryKeySQL(false);
    final resSale_itemBYvariationId = await Sale_item()
        .select()
        .where('variationId IN (${idListSale_itemBYvariationId['sql']})',
            parameterValue: idListSale_itemBYvariationId['args'])
        .update({'isDeleted': 0});
    if (!resSale_itemBYvariationId.success) {
      return resSale_itemBYvariationId;
    }
    return _mnVariation!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from variation ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnVariation!.updateBatch(qparams, values);
  }

  /// This method always returns [Variation] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Variation?
  @override
  Future<Variation?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnVariation!.toList(qparams);
    final data = await objFuture;
    Variation? obj;
    if (data.isNotEmpty) {
      obj = Variation.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('variation.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('variation.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Variation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Variation?
  @override
  Future<Variation> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Variation();
  }

  /// This method returns int. [Variation]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? variationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final variationsFuture = await _mnVariation!.toList(qparams);
    final int count = variationsFuture[0]['CNT'] as int;
    if (variationCount != null) {
      variationCount(count);
    }
    return count;
  }

  /// This method returns List<Variation> [Variation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Variation>
  @override
  Future<List<Variation>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Variation> variationsData = await Variation.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return variationsData;
  }

  /// This method returns Json String [Variation]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Variation]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Variation]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnVariation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Variation]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM variation WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnVariation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Variation]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnVariation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Variation.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnVariation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VariationFilterBuilder

// region VariationFields
class VariationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fVariation_id;
  static TableField get variation_id {
    return _fVariation_id = _fVariation_id ??
        SqlSyntax.setField(_fVariation_id, 'variation_id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fSub_sku;
  static TableField get sub_sku {
    return _fSub_sku =
        _fSub_sku ?? SqlSyntax.setField(_fSub_sku, 'sub_sku', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField? _fStock;
  static TableField get stock {
    return _fStock =
        _fStock ?? SqlSyntax.setField(_fStock, 'stock', DbType.real);
  }

  static TableField? _fUnit_name;
  static TableField get unit_name {
    return _fUnit_name = _fUnit_name ??
        SqlSyntax.setField(_fUnit_name, 'unit_name', DbType.text);
  }

  static TableField? _fAlert;
  static TableField get alert {
    return _fAlert =
        _fAlert ?? SqlSyntax.setField(_fAlert, 'alert', DbType.real);
  }

  static TableField? _fExpiry_period;
  static TableField get expiry_period {
    return _fExpiry_period = _fExpiry_period ??
        SqlSyntax.setField(_fExpiry_period, 'expiry_period', DbType.text);
  }

  static TableField? _fExpiry_period_type;
  static TableField get expiry_period_type {
    return _fExpiry_period_type = _fExpiry_period_type ??
        SqlSyntax.setField(
            _fExpiry_period_type, 'expiry_period_type', DbType.text);
  }

  static TableField? _fWeight;
  static TableField get weight {
    return _fWeight =
        _fWeight ?? SqlSyntax.setField(_fWeight, 'weight', DbType.text);
  }

  static TableField? _fImg;
  static TableField get img {
    return _fImg = _fImg ?? SqlSyntax.setField(_fImg, 'img', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fProductId;
  static TableField get productId {
    return _fProductId = _fProductId ??
        SqlSyntax.setField(_fProductId, 'productId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion VariationFields

//region VariationManager
class VariationManager extends SqfEntityProvider {
  VariationManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'variation';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion VariationManager
// region Customer
class Customer extends TableBase {
  Customer(
      {this.id,
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.prefix,
      this.name,
      this.firstname,
      this.middleName,
      this.surname,
      this.phone,
      this.mobile,
      this.email,
      this.addressLine1,
      this.addressLine2,
      this.city,
      this.state,
      this.shippingAddress,
      this.status,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Customer.withFields(
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.prefix,
      this.name,
      this.firstname,
      this.middleName,
      this.surname,
      this.phone,
      this.mobile,
      this.email,
      this.addressLine1,
      this.addressLine2,
      this.city,
      this.state,
      this.shippingAddress,
      this.status,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  Customer.withId(
      this.id,
      this.unique_id,
      this.ref_id,
      this.business_id,
      this.prefix,
      this.name,
      this.firstname,
      this.middleName,
      this.surname,
      this.phone,
      this.mobile,
      this.email,
      this.addressLine1,
      this.addressLine2,
      this.city,
      this.state,
      this.shippingAddress,
      this.status,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Customer.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['unique_id'] != null) {
      unique_id = int.tryParse(o['unique_id'].toString());
    }
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['prefix'] != null) {
      prefix = o['prefix'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['firstname'] != null) {
      firstname = o['firstname'].toString();
    }
    if (o['middleName'] != null) {
      middleName = o['middleName'].toString();
    }
    if (o['surname'] != null) {
      surname = o['surname'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['mobile'] != null) {
      mobile = o['mobile'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['addressLine1'] != null) {
      addressLine1 = o['addressLine1'].toString();
    }
    if (o['addressLine2'] != null) {
      addressLine2 = o['addressLine2'].toString();
    }
    if (o['city'] != null) {
      city = o['city'].toString();
    }
    if (o['state'] != null) {
      state = o['state'].toString();
    }
    if (o['shippingAddress'] != null) {
      shippingAddress = o['shippingAddress'].toString();
    }
    if (o['status'] != null) {
      status = o['status'].toString();
    }
    if (o['custom_field1'] != null) {
      custom_field1 = o['custom_field1'].toString();
    }
    if (o['custom_field2'] != null) {
      custom_field2 = o['custom_field2'].toString();
    }
    if (o['custom_field3'] != null) {
      custom_field3 = o['custom_field3'].toString();
    }
    if (o['custom_field4'] != null) {
      custom_field4 = o['custom_field4'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Customer)
  int? id;
  int? unique_id;
  int? ref_id;
  int? business_id;
  String? prefix;
  String? name;
  String? firstname;
  String? middleName;
  String? surname;
  String? phone;
  String? mobile;
  String? email;
  String? addressLine1;
  String? addressLine2;
  String? city;
  String? state;
  String? shippingAddress;
  String? status;
  String? custom_field1;
  String? custom_field2;
  String? custom_field3;
  String? custom_field4;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  bool? isDeleted;

  // end FIELDS (Customer)

// COLLECTIONS & VIRTUALS (Customer)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSales', 'plField2'..]) or so on..
  List<Sale>? plSales;

  /// get Sale(s) filtered by id=customerId
  SaleFilterBuilder? getSales(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sale()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .customerId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Customer)

  static const bool _softDeleteActivated = true;
  CustomerManager? __mnCustomer;

  CustomerManager get _mnCustomer {
    return __mnCustomer = __mnCustomer ?? CustomerManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (prefix != null || !forView) {
      map['prefix'] = prefix;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (firstname != null || !forView) {
      map['firstname'] = firstname;
    }
    if (middleName != null || !forView) {
      map['middleName'] = middleName;
    }
    if (surname != null || !forView) {
      map['surname'] = surname;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (addressLine1 != null || !forView) {
      map['addressLine1'] = addressLine1;
    }
    if (addressLine2 != null || !forView) {
      map['addressLine2'] = addressLine2;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (shippingAddress != null || !forView) {
      map['shippingAddress'] = shippingAddress;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (prefix != null || !forView) {
      map['prefix'] = prefix;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (firstname != null || !forView) {
      map['firstname'] = firstname;
    }
    if (middleName != null || !forView) {
      map['middleName'] = middleName;
    }
    if (surname != null || !forView) {
      map['surname'] = surname;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (addressLine1 != null || !forView) {
      map['addressLine1'] = addressLine1;
    }
    if (addressLine2 != null || !forView) {
      map['addressLine2'] = addressLine2;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (shippingAddress != null || !forView) {
      map['shippingAddress'] = shippingAddress;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Customer)
    if (!forQuery) {
      map['Sales'] = await getSales()!.toMapList();
    }
// END COLLECTIONS (Customer)

    return map;
  }

  /// This method returns Json String [Customer]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Customer]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      unique_id,
      ref_id,
      business_id,
      prefix,
      name,
      firstname,
      middleName,
      surname,
      phone,
      mobile,
      email,
      addressLine1,
      addressLine2,
      city,
      state,
      shippingAddress,
      status,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      unique_id,
      ref_id,
      business_id,
      prefix,
      name,
      firstname,
      middleName,
      surname,
      phone,
      mobile,
      email,
      addressLine1,
      addressLine2,
      city,
      state,
      shippingAddress,
      status,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  static Future<List<Customer>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Customer.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Customer>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Customer>[];
    try {
      objList = list
          .map((customer) => Customer.fromMap(customer as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Customer.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Customer>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Customer> objList = <Customer>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Customer.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('customer.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('customer.plSales'); */ obj.plSales =
              obj.plSales ??
                  await obj.getSales()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Customer by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Customer] if exist, otherwise returns null
  Future<Customer?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Customer? obj;
    final data = await _mnCustomer.getById([id]);
    if (data.length != 0) {
      obj = Customer.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('customer.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('customer.plSales'); */ obj.plSales =
              obj.plSales ??
                  await obj.getSales()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Customer) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await CustomeridentitySequence().nextVal();

      id = await _mnCustomer.insert(this, ignoreBatch);
    } else {
      await _mnCustomer.update(this);
    }

    return id;
  }

  /// Saves the (Customer) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await CustomeridentitySequence().nextVal();

      id = await _mnCustomer.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCustomer.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Customer. Returns a new Primary Key value of Customer

  /// <returns>Returns a new Primary Key value of Customer
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Customer> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Customer> customers,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in customers) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < customers.length; i++) {
        if (customers[i].id == null) {
          customers[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCustomer.rawInsert(
          'INSERT OR REPLACE INTO customer (id, unique_id, ref_id, business_id, prefix, name, firstname, middleName, surname, phone, mobile, email, addressLine1, addressLine2, city, state, shippingAddress, status, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            unique_id,
            ref_id,
            business_id,
            prefix,
            name,
            firstname,
            middleName,
            surname,
            phone,
            mobile,
            email,
            addressLine1,
            addressLine2,
            city,
            state,
            shippingAddress,
            status,
            custom_field1,
            custom_field2,
            custom_field3,
            custom_field4,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Customer id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Customer id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Customer Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Customer>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Customer> customers,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnCustomer.rawInsertAll(
        'INSERT OR REPLACE INTO customer (id, unique_id, ref_id, business_id, prefix, name, firstname, middleName, surname, phone, mobile, email, addressLine1, addressLine2, city, state, shippingAddress, status, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        customers,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Customer

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Customer invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Sale().select().customerId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCustomer
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCustomer.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Customer

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Customer invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Sale()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .customerId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnCustomer.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  CustomerFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CustomerFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CustomerFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CustomerFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion customer

// region CustomerField
class CustomerField extends FilterBase {
  CustomerField(CustomerFilterBuilder customerFB) : super(customerFB);

  @override
  CustomerFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder isNull() {
    return super.isNull() as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CustomerFilterBuilder;
  }

  @override
  CustomerField get not {
    return super.not as CustomerField;
  }
}
// endregion CustomerField

// region CustomerFilterBuilder
class CustomerFilterBuilder extends ConjunctionBase {
  CustomerFilterBuilder(Customer obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCustomer = obj._mnCustomer;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CustomerManager? _mnCustomer;

  /// put the sql keyword 'AND'
  @override
  CustomerFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CustomerFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CustomerFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CustomerFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CustomerFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CustomerFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CustomerFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CustomerFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CustomerFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CustomerFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CustomerFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CustomerField _setField(CustomerField? field, String colName, DbType dbtype) {
    return CustomerField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CustomerField? _id;
  CustomerField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  CustomerField? _unique_id;
  CustomerField get unique_id {
    return _unique_id = _setField(_unique_id, 'unique_id', DbType.integer);
  }

  CustomerField? _ref_id;
  CustomerField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  CustomerField? _business_id;
  CustomerField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  CustomerField? _prefix;
  CustomerField get prefix {
    return _prefix = _setField(_prefix, 'prefix', DbType.text);
  }

  CustomerField? _name;
  CustomerField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  CustomerField? _firstname;
  CustomerField get firstname {
    return _firstname = _setField(_firstname, 'firstname', DbType.text);
  }

  CustomerField? _middleName;
  CustomerField get middleName {
    return _middleName = _setField(_middleName, 'middleName', DbType.text);
  }

  CustomerField? _surname;
  CustomerField get surname {
    return _surname = _setField(_surname, 'surname', DbType.text);
  }

  CustomerField? _phone;
  CustomerField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  CustomerField? _mobile;
  CustomerField get mobile {
    return _mobile = _setField(_mobile, 'mobile', DbType.text);
  }

  CustomerField? _email;
  CustomerField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  CustomerField? _addressLine1;
  CustomerField get addressLine1 {
    return _addressLine1 =
        _setField(_addressLine1, 'addressLine1', DbType.text);
  }

  CustomerField? _addressLine2;
  CustomerField get addressLine2 {
    return _addressLine2 =
        _setField(_addressLine2, 'addressLine2', DbType.text);
  }

  CustomerField? _city;
  CustomerField get city {
    return _city = _setField(_city, 'city', DbType.text);
  }

  CustomerField? _state;
  CustomerField get state {
    return _state = _setField(_state, 'state', DbType.text);
  }

  CustomerField? _shippingAddress;
  CustomerField get shippingAddress {
    return _shippingAddress =
        _setField(_shippingAddress, 'shippingAddress', DbType.text);
  }

  CustomerField? _status;
  CustomerField get status {
    return _status = _setField(_status, 'status', DbType.text);
  }

  CustomerField? _custom_field1;
  CustomerField get custom_field1 {
    return _custom_field1 =
        _setField(_custom_field1, 'custom_field1', DbType.text);
  }

  CustomerField? _custom_field2;
  CustomerField get custom_field2 {
    return _custom_field2 =
        _setField(_custom_field2, 'custom_field2', DbType.text);
  }

  CustomerField? _custom_field3;
  CustomerField get custom_field3 {
    return _custom_field3 =
        _setField(_custom_field3, 'custom_field3', DbType.text);
  }

  CustomerField? _custom_field4;
  CustomerField get custom_field4 {
    return _custom_field4 =
        _setField(_custom_field4, 'custom_field4', DbType.text);
  }

  CustomerField? _dateAdded;
  CustomerField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  CustomerField? _dateUpdated;
  CustomerField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  CustomerField? _dateSynced;
  CustomerField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  CustomerField? _isSynced;
  CustomerField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  CustomerField? _isActive;
  CustomerField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  CustomerField? _isCloudActive;
  CustomerField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  CustomerField? _isDeleted;
  CustomerField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Customer> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Sale) according to DeleteRule.CASCADE
    final idListSaleBYcustomerId = toListPrimaryKeySQL(false);
    final resSaleBYcustomerId = await Sale()
        .select()
        .where('customerId IN (${idListSaleBYcustomerId['sql']})',
            parameterValue: idListSaleBYcustomerId['args'])
        .delete(hardDelete);
    if (!resSaleBYcustomerId.success) {
      return resSaleBYcustomerId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCustomer!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCustomer!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Customer> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Customer bulk invoked');
    // Recover sub records where in (Sale) according to DeleteRule.CASCADE
    final idListSaleBYcustomerId = toListPrimaryKeySQL(false);
    final resSaleBYcustomerId = await Sale()
        .select()
        .where('customerId IN (${idListSaleBYcustomerId['sql']})',
            parameterValue: idListSaleBYcustomerId['args'])
        .update({'isDeleted': 0});
    if (!resSaleBYcustomerId.success) {
      return resSaleBYcustomerId;
    }
    return _mnCustomer!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from customer ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCustomer!.updateBatch(qparams, values);
  }

  /// This method always returns [Customer] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Customer?
  @override
  Future<Customer?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCustomer!.toList(qparams);
    final data = await objFuture;
    Customer? obj;
    if (data.isNotEmpty) {
      obj = Customer.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('customer.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('customer.plSales'); */ obj.plSales =
              obj.plSales ??
                  await obj.getSales()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Customer]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Customer?
  @override
  Future<Customer> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Customer();
  }

  /// This method returns int. [Customer]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? customerCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final customersFuture = await _mnCustomer!.toList(qparams);
    final int count = customersFuture[0]['CNT'] as int;
    if (customerCount != null) {
      customerCount(count);
    }
    return count;
  }

  /// This method returns List<Customer> [Customer]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Customer>
  @override
  Future<List<Customer>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Customer> customersData = await Customer.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return customersData;
  }

  /// This method returns Json String [Customer]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Customer]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Customer]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCustomer!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Customer]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM customer WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCustomer!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Customer]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCustomer!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Customer.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCustomer!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CustomerFilterBuilder

// region CustomerFields
class CustomerFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUnique_id;
  static TableField get unique_id {
    return _fUnique_id = _fUnique_id ??
        SqlSyntax.setField(_fUnique_id, 'unique_id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fPrefix;
  static TableField get prefix {
    return _fPrefix =
        _fPrefix ?? SqlSyntax.setField(_fPrefix, 'prefix', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fFirstname;
  static TableField get firstname {
    return _fFirstname = _fFirstname ??
        SqlSyntax.setField(_fFirstname, 'firstname', DbType.text);
  }

  static TableField? _fMiddleName;
  static TableField get middleName {
    return _fMiddleName = _fMiddleName ??
        SqlSyntax.setField(_fMiddleName, 'middleName', DbType.text);
  }

  static TableField? _fSurname;
  static TableField get surname {
    return _fSurname =
        _fSurname ?? SqlSyntax.setField(_fSurname, 'surname', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fMobile;
  static TableField get mobile {
    return _fMobile =
        _fMobile ?? SqlSyntax.setField(_fMobile, 'mobile', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fAddressLine1;
  static TableField get addressLine1 {
    return _fAddressLine1 = _fAddressLine1 ??
        SqlSyntax.setField(_fAddressLine1, 'addressLine1', DbType.text);
  }

  static TableField? _fAddressLine2;
  static TableField get addressLine2 {
    return _fAddressLine2 = _fAddressLine2 ??
        SqlSyntax.setField(_fAddressLine2, 'addressLine2', DbType.text);
  }

  static TableField? _fCity;
  static TableField get city {
    return _fCity = _fCity ?? SqlSyntax.setField(_fCity, 'city', DbType.text);
  }

  static TableField? _fState;
  static TableField get state {
    return _fState =
        _fState ?? SqlSyntax.setField(_fState, 'state', DbType.text);
  }

  static TableField? _fShippingAddress;
  static TableField get shippingAddress {
    return _fShippingAddress = _fShippingAddress ??
        SqlSyntax.setField(_fShippingAddress, 'shippingAddress', DbType.text);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.text);
  }

  static TableField? _fCustom_field1;
  static TableField get custom_field1 {
    return _fCustom_field1 = _fCustom_field1 ??
        SqlSyntax.setField(_fCustom_field1, 'custom_field1', DbType.text);
  }

  static TableField? _fCustom_field2;
  static TableField get custom_field2 {
    return _fCustom_field2 = _fCustom_field2 ??
        SqlSyntax.setField(_fCustom_field2, 'custom_field2', DbType.text);
  }

  static TableField? _fCustom_field3;
  static TableField get custom_field3 {
    return _fCustom_field3 = _fCustom_field3 ??
        SqlSyntax.setField(_fCustom_field3, 'custom_field3', DbType.text);
  }

  static TableField? _fCustom_field4;
  static TableField get custom_field4 {
    return _fCustom_field4 = _fCustom_field4 ??
        SqlSyntax.setField(_fCustom_field4, 'custom_field4', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CustomerFields

//region CustomerManager
class CustomerManager extends SqfEntityProvider {
  CustomerManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'customer';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion CustomerManager
// region Sale
class Sale extends TableBase {
  Sale(
      {this.id,
      this.unique_id,
      this.ref_id,
      this.title,
      this.business_id,
      this.amountBeforeTax,
      this.taxAmount,
      this.totalAmount,
      this.amountReceived,
      this.changeGiven,
      this.discount,
      this.taxLabel,
      this.discountLabel,
      this.paymentMethod,
      this.status,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.customerId,
      this.taxId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Sale.withFields(
      this.unique_id,
      this.ref_id,
      this.title,
      this.business_id,
      this.amountBeforeTax,
      this.taxAmount,
      this.totalAmount,
      this.amountReceived,
      this.changeGiven,
      this.discount,
      this.taxLabel,
      this.discountLabel,
      this.paymentMethod,
      this.status,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.customerId,
      this.taxId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Sale.withId(
      this.id,
      this.unique_id,
      this.ref_id,
      this.title,
      this.business_id,
      this.amountBeforeTax,
      this.taxAmount,
      this.totalAmount,
      this.amountReceived,
      this.changeGiven,
      this.discount,
      this.taxLabel,
      this.discountLabel,
      this.paymentMethod,
      this.status,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.customerId,
      this.taxId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Sale.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['unique_id'] != null) {
      unique_id = int.tryParse(o['unique_id'].toString());
    }
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['amountBeforeTax'] != null) {
      amountBeforeTax = double.tryParse(o['amountBeforeTax'].toString());
    }
    if (o['taxAmount'] != null) {
      taxAmount = double.tryParse(o['taxAmount'].toString());
    }
    if (o['totalAmount'] != null) {
      totalAmount = double.tryParse(o['totalAmount'].toString());
    }
    if (o['amountReceived'] != null) {
      amountReceived = double.tryParse(o['amountReceived'].toString());
    }
    if (o['changeGiven'] != null) {
      changeGiven = double.tryParse(o['changeGiven'].toString());
    }
    if (o['discount'] != null) {
      discount = double.tryParse(o['discount'].toString());
    }
    if (o['taxLabel'] != null) {
      taxLabel = o['taxLabel'].toString();
    }
    if (o['discountLabel'] != null) {
      discountLabel = o['discountLabel'].toString();
    }
    if (o['paymentMethod'] != null) {
      paymentMethod = o['paymentMethod'].toString();
    }
    if (o['status'] != null) {
      status = o['status'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    customerId = int.tryParse(o['customerId'].toString());

    taxId = int.tryParse(o['taxId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plCustomer = o['customer'] != null
        ? Customer.fromMap(o['customer'] as Map<String, dynamic>)
        : null;
    plTax =
        o['tax'] != null ? Tax.fromMap(o['tax'] as Map<String, dynamic>) : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Sale)
  int? id;
  int? unique_id;
  int? ref_id;
  String? title;
  int? business_id;
  double? amountBeforeTax;
  double? taxAmount;
  double? totalAmount;
  double? amountReceived;
  double? changeGiven;
  double? discount;
  String? taxLabel;
  String? discountLabel;
  String? paymentMethod;
  String? status;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  int? customerId;
  int? taxId;
  bool? isDeleted;

  // end FIELDS (Sale)

// RELATIONSHIPS (Sale)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plCustomer', 'plField2'..]) or so on..
  Customer? plCustomer;

  /// get Customer By CustomerId
  Future<Customer?> getCustomer(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Customer().getById(customerId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTax', 'plField2'..]) or so on..
  Tax? plTax;

  /// get Tax By TaxId
  Future<Tax?> getTax(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Tax()
        .getById(taxId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Sale)

// COLLECTIONS & VIRTUALS (Sale)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSale_items', 'plField2'..]) or so on..
  List<Sale_item>? plSale_items;

  /// get Sale_item(s) filtered by id=saleId
  Sale_itemFilterBuilder? getSale_items(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sale_item()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .saleId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Sale)

  static const bool _softDeleteActivated = true;
  SaleManager? __mnSale;

  SaleManager get _mnSale {
    return __mnSale = __mnSale ?? SaleManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (amountBeforeTax != null || !forView) {
      map['amountBeforeTax'] = amountBeforeTax;
    }
    if (taxAmount != null || !forView) {
      map['taxAmount'] = taxAmount;
    }
    if (totalAmount != null || !forView) {
      map['totalAmount'] = totalAmount;
    }
    if (amountReceived != null || !forView) {
      map['amountReceived'] = amountReceived;
    }
    if (changeGiven != null || !forView) {
      map['changeGiven'] = changeGiven;
    }
    if (discount != null || !forView) {
      map['discount'] = discount;
    }
    if (taxLabel != null || !forView) {
      map['taxLabel'] = taxLabel;
    }
    if (discountLabel != null || !forView) {
      map['discountLabel'] = discountLabel;
    }
    if (paymentMethod != null || !forView) {
      map['paymentMethod'] = paymentMethod;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (customerId != null) {
      map['customerId'] = forView
          ? plCustomer == null
              ? customerId
              : plCustomer!.prefix
          : customerId;
    } else if (customerId != null || !forView) {
      map['customerId'] = null;
    }
    if (taxId != null) {
      map['taxId'] = forView
          ? plTax == null
              ? taxId
              : plTax!.name
          : taxId;
    } else if (taxId != null || !forView) {
      map['taxId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (amountBeforeTax != null || !forView) {
      map['amountBeforeTax'] = amountBeforeTax;
    }
    if (taxAmount != null || !forView) {
      map['taxAmount'] = taxAmount;
    }
    if (totalAmount != null || !forView) {
      map['totalAmount'] = totalAmount;
    }
    if (amountReceived != null || !forView) {
      map['amountReceived'] = amountReceived;
    }
    if (changeGiven != null || !forView) {
      map['changeGiven'] = changeGiven;
    }
    if (discount != null || !forView) {
      map['discount'] = discount;
    }
    if (taxLabel != null || !forView) {
      map['taxLabel'] = taxLabel;
    }
    if (discountLabel != null || !forView) {
      map['discountLabel'] = discountLabel;
    }
    if (paymentMethod != null || !forView) {
      map['paymentMethod'] = paymentMethod;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (customerId != null) {
      map['customerId'] = forView
          ? plCustomer == null
              ? customerId
              : plCustomer!.prefix
          : customerId;
    } else if (customerId != null || !forView) {
      map['customerId'] = null;
    }
    if (taxId != null) {
      map['taxId'] = forView
          ? plTax == null
              ? taxId
              : plTax!.name
          : taxId;
    } else if (taxId != null || !forView) {
      map['taxId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Sale)
    if (!forQuery) {
      map['Sale_items'] = await getSale_items()!.toMapList();
    }
// END COLLECTIONS (Sale)

    return map;
  }

  /// This method returns Json String [Sale]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Sale]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      unique_id,
      ref_id,
      title,
      business_id,
      amountBeforeTax,
      taxAmount,
      totalAmount,
      amountReceived,
      changeGiven,
      discount,
      taxLabel,
      discountLabel,
      paymentMethod,
      status,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      customerId,
      taxId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      unique_id,
      ref_id,
      title,
      business_id,
      amountBeforeTax,
      taxAmount,
      totalAmount,
      amountReceived,
      changeGiven,
      discount,
      taxLabel,
      discountLabel,
      paymentMethod,
      status,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      customerId,
      taxId,
      isDeleted
    ];
  }

  static Future<List<Sale>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sale.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Sale>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Sale>[];
    try {
      objList = list
          .map((sale) => Sale.fromMap(sale as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sale.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Sale>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Sale> objList = <Sale>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Sale.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sale.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('sale.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCustomer'))) {
          obj.plCustomer =
              obj.plCustomer ?? await obj.getCustomer(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTax'))) {
          obj.plTax = obj.plTax ?? await obj.getTax(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Sale by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Sale] if exist, otherwise returns null
  Future<Sale?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Sale? obj;
    final data = await _mnSale.getById([id]);
    if (data.length != 0) {
      obj = Sale.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sale.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('sale.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCustomer'))) {
          obj.plCustomer =
              obj.plCustomer ?? await obj.getCustomer(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTax'))) {
          obj.plTax = obj.plTax ?? await obj.getTax(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Sale) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await SalesidentitySequence().nextVal();

      id = await _mnSale.insert(this, ignoreBatch);
    } else {
      await _mnSale.update(this);
    }

    return id;
  }

  /// Saves the (Sale) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await SalesidentitySequence().nextVal();

      id = await _mnSale.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSale.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Sale. Returns a new Primary Key value of Sale

  /// <returns>Returns a new Primary Key value of Sale
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Sale> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Sale> sales,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in sales) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < sales.length; i++) {
        if (sales[i].id == null) {
          sales[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSale.rawInsert(
          'INSERT OR REPLACE INTO sale (id, unique_id, ref_id, title, business_id, amountBeforeTax, taxAmount, totalAmount, amountReceived, changeGiven, discount, taxLabel, discountLabel, paymentMethod, status, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, customerId, taxId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            unique_id,
            ref_id,
            title,
            business_id,
            amountBeforeTax,
            taxAmount,
            totalAmount,
            amountReceived,
            changeGiven,
            discount,
            taxLabel,
            discountLabel,
            paymentMethod,
            status,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            customerId,
            taxId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Sale id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Sale id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Sale Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Sale>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Sale> sales,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnSale.rawInsertAll(
        'INSERT OR REPLACE INTO sale (id, unique_id, ref_id, title, business_id, amountBeforeTax, taxAmount, totalAmount, amountReceived, changeGiven, discount, taxLabel, discountLabel, paymentMethod, status, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, customerId, taxId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        sales,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Sale

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Sale invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Sale_item().select().saleId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSale
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSale.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Sale

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Sale invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Sale_item()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .saleId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnSale.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  SaleFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SaleFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SaleFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SaleFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    customerId = customerId ?? 0;
    taxId = taxId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sale

// region SaleField
class SaleField extends FilterBase {
  SaleField(SaleFilterBuilder saleFB) : super(saleFB);

  @override
  SaleFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder isNull() {
    return super.isNull() as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SaleFilterBuilder;
  }

  @override
  SaleFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SaleFilterBuilder;
  }

  @override
  SaleField get not {
    return super.not as SaleField;
  }
}
// endregion SaleField

// region SaleFilterBuilder
class SaleFilterBuilder extends ConjunctionBase {
  SaleFilterBuilder(Sale obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnSale = obj._mnSale;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SaleManager? _mnSale;

  /// put the sql keyword 'AND'
  @override
  SaleFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SaleFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SaleFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SaleFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SaleFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SaleFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SaleFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SaleFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SaleFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SaleFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SaleFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SaleField _setField(SaleField? field, String colName, DbType dbtype) {
    return SaleField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SaleField? _id;
  SaleField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SaleField? _unique_id;
  SaleField get unique_id {
    return _unique_id = _setField(_unique_id, 'unique_id', DbType.integer);
  }

  SaleField? _ref_id;
  SaleField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  SaleField? _title;
  SaleField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  SaleField? _business_id;
  SaleField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  SaleField? _amountBeforeTax;
  SaleField get amountBeforeTax {
    return _amountBeforeTax =
        _setField(_amountBeforeTax, 'amountBeforeTax', DbType.real);
  }

  SaleField? _taxAmount;
  SaleField get taxAmount {
    return _taxAmount = _setField(_taxAmount, 'taxAmount', DbType.real);
  }

  SaleField? _totalAmount;
  SaleField get totalAmount {
    return _totalAmount = _setField(_totalAmount, 'totalAmount', DbType.real);
  }

  SaleField? _amountReceived;
  SaleField get amountReceived {
    return _amountReceived =
        _setField(_amountReceived, 'amountReceived', DbType.real);
  }

  SaleField? _changeGiven;
  SaleField get changeGiven {
    return _changeGiven = _setField(_changeGiven, 'changeGiven', DbType.real);
  }

  SaleField? _discount;
  SaleField get discount {
    return _discount = _setField(_discount, 'discount', DbType.real);
  }

  SaleField? _taxLabel;
  SaleField get taxLabel {
    return _taxLabel = _setField(_taxLabel, 'taxLabel', DbType.text);
  }

  SaleField? _discountLabel;
  SaleField get discountLabel {
    return _discountLabel =
        _setField(_discountLabel, 'discountLabel', DbType.text);
  }

  SaleField? _paymentMethod;
  SaleField get paymentMethod {
    return _paymentMethod =
        _setField(_paymentMethod, 'paymentMethod', DbType.text);
  }

  SaleField? _status;
  SaleField get status {
    return _status = _setField(_status, 'status', DbType.text);
  }

  SaleField? _dateAdded;
  SaleField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  SaleField? _dateUpdated;
  SaleField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  SaleField? _dateSynced;
  SaleField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  SaleField? _isSynced;
  SaleField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  SaleField? _isActive;
  SaleField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  SaleField? _isCloudActive;
  SaleField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  SaleField? _customerId;
  SaleField get customerId {
    return _customerId = _setField(_customerId, 'customerId', DbType.integer);
  }

  SaleField? _taxId;
  SaleField get taxId {
    return _taxId = _setField(_taxId, 'taxId', DbType.integer);
  }

  SaleField? _isDeleted;
  SaleField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Sale> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYsaleId = toListPrimaryKeySQL(false);
    final resSale_itemBYsaleId = await Sale_item()
        .select()
        .where('saleId IN (${idListSale_itemBYsaleId['sql']})',
            parameterValue: idListSale_itemBYsaleId['args'])
        .delete(hardDelete);
    if (!resSale_itemBYsaleId.success) {
      return resSale_itemBYsaleId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSale!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSale!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Sale> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Sale bulk invoked');
    // Recover sub records where in (Sale_item) according to DeleteRule.CASCADE
    final idListSale_itemBYsaleId = toListPrimaryKeySQL(false);
    final resSale_itemBYsaleId = await Sale_item()
        .select()
        .where('saleId IN (${idListSale_itemBYsaleId['sql']})',
            parameterValue: idListSale_itemBYsaleId['args'])
        .update({'isDeleted': 0});
    if (!resSale_itemBYsaleId.success) {
      return resSale_itemBYsaleId;
    }
    return _mnSale!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from sale ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSale!.updateBatch(qparams, values);
  }

  /// This method always returns [Sale] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sale?
  @override
  Future<Sale?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSale!.toList(qparams);
    final data = await objFuture;
    Sale? obj;
    if (data.isNotEmpty) {
      obj = Sale.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sale.plSale_items') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSale_items'))) {
          /*_loadedfields!.add('sale.plSale_items'); */ obj.plSale_items =
              obj.plSale_items ??
                  await obj.getSale_items()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCustomer'))) {
          obj.plCustomer =
              obj.plCustomer ?? await obj.getCustomer(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTax'))) {
          obj.plTax = obj.plTax ?? await obj.getTax(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Sale]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sale?
  @override
  Future<Sale> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Sale();
  }

  /// This method returns int. [Sale]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? saleCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final salesFuture = await _mnSale!.toList(qparams);
    final int count = salesFuture[0]['CNT'] as int;
    if (saleCount != null) {
      saleCount(count);
    }
    return count;
  }

  /// This method returns List<Sale> [Sale]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Sale>
  @override
  Future<List<Sale>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Sale> salesData = await Sale.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return salesData;
  }

  /// This method returns Json String [Sale]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Sale]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Sale]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSale!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Sale]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM sale WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSale!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Sale]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSale!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Sale.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSale!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SaleFilterBuilder

// region SaleFields
class SaleFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUnique_id;
  static TableField get unique_id {
    return _fUnique_id = _fUnique_id ??
        SqlSyntax.setField(_fUnique_id, 'unique_id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fAmountBeforeTax;
  static TableField get amountBeforeTax {
    return _fAmountBeforeTax = _fAmountBeforeTax ??
        SqlSyntax.setField(_fAmountBeforeTax, 'amountBeforeTax', DbType.real);
  }

  static TableField? _fTaxAmount;
  static TableField get taxAmount {
    return _fTaxAmount = _fTaxAmount ??
        SqlSyntax.setField(_fTaxAmount, 'taxAmount', DbType.real);
  }

  static TableField? _fTotalAmount;
  static TableField get totalAmount {
    return _fTotalAmount = _fTotalAmount ??
        SqlSyntax.setField(_fTotalAmount, 'totalAmount', DbType.real);
  }

  static TableField? _fAmountReceived;
  static TableField get amountReceived {
    return _fAmountReceived = _fAmountReceived ??
        SqlSyntax.setField(_fAmountReceived, 'amountReceived', DbType.real);
  }

  static TableField? _fChangeGiven;
  static TableField get changeGiven {
    return _fChangeGiven = _fChangeGiven ??
        SqlSyntax.setField(_fChangeGiven, 'changeGiven', DbType.real);
  }

  static TableField? _fDiscount;
  static TableField get discount {
    return _fDiscount =
        _fDiscount ?? SqlSyntax.setField(_fDiscount, 'discount', DbType.real);
  }

  static TableField? _fTaxLabel;
  static TableField get taxLabel {
    return _fTaxLabel =
        _fTaxLabel ?? SqlSyntax.setField(_fTaxLabel, 'taxLabel', DbType.text);
  }

  static TableField? _fDiscountLabel;
  static TableField get discountLabel {
    return _fDiscountLabel = _fDiscountLabel ??
        SqlSyntax.setField(_fDiscountLabel, 'discountLabel', DbType.text);
  }

  static TableField? _fPaymentMethod;
  static TableField get paymentMethod {
    return _fPaymentMethod = _fPaymentMethod ??
        SqlSyntax.setField(_fPaymentMethod, 'paymentMethod', DbType.text);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fCustomerId;
  static TableField get customerId {
    return _fCustomerId = _fCustomerId ??
        SqlSyntax.setField(_fCustomerId, 'customerId', DbType.integer);
  }

  static TableField? _fTaxId;
  static TableField get taxId {
    return _fTaxId =
        _fTaxId ?? SqlSyntax.setField(_fTaxId, 'taxId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SaleFields

//region SaleManager
class SaleManager extends SqfEntityProvider {
  SaleManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sale';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SaleManager
// region Sale_item
class Sale_item extends TableBase {
  Sale_item(
      {this.id,
      this.ref_id,
      this.quantity,
      this.productId,
      this.saleId,
      this.variationId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Sale_item.withFields(this.ref_id, this.quantity, this.productId, this.saleId,
      this.variationId, this.isDeleted) {
    _setDefaultValues();
  }
  Sale_item.withId(this.id, this.ref_id, this.quantity, this.productId,
      this.saleId, this.variationId, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Sale_item.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['quantity'] != null) {
      quantity = double.tryParse(o['quantity'].toString());
    }
    productId = int.tryParse(o['productId'].toString());

    saleId = int.tryParse(o['saleId'].toString());

    variationId = int.tryParse(o['variationId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plProduct = o['product'] != null
        ? Product.fromMap(o['product'] as Map<String, dynamic>)
        : null;
    plSale = o['sale'] != null
        ? Sale.fromMap(o['sale'] as Map<String, dynamic>)
        : null;
    plVariation = o['variation'] != null
        ? Variation.fromMap(o['variation'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Sale_item)
  int? id;
  int? ref_id;
  double? quantity;
  int? productId;
  int? saleId;
  int? variationId;
  bool? isDeleted;

  // end FIELDS (Sale_item)

// RELATIONSHIPS (Sale_item)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plProduct', 'plField2'..]) or so on..
  Product? plProduct;

  /// get Product By ProductId
  Future<Product?> getProduct(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Product().getById(productId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSale', 'plField2'..]) or so on..
  Sale? plSale;

  /// get Sale By SaleId
  Future<Sale?> getSale(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Sale()
        .getById(saleId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plVariation', 'plField2'..]) or so on..
  Variation? plVariation;

  /// get Variation By VariationId
  Future<Variation?> getVariation(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Variation().getById(variationId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Sale_item)

  static const bool _softDeleteActivated = true;
  Sale_itemManager? __mnSale_item;

  Sale_itemManager get _mnSale_item {
    return __mnSale_item = __mnSale_item ?? Sale_itemManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (quantity != null || !forView) {
      map['quantity'] = quantity;
    }
    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    } else if (productId != null || !forView) {
      map['productId'] = null;
    }
    if (saleId != null) {
      map['saleId'] = forView
          ? plSale == null
              ? saleId
              : plSale!.title
          : saleId;
    } else if (saleId != null || !forView) {
      map['saleId'] = null;
    }
    if (variationId != null) {
      map['variationId'] = forView
          ? plVariation == null
              ? variationId
              : plVariation!.name
          : variationId;
    } else if (variationId != null || !forView) {
      map['variationId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (quantity != null || !forView) {
      map['quantity'] = quantity;
    }
    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    } else if (productId != null || !forView) {
      map['productId'] = null;
    }
    if (saleId != null) {
      map['saleId'] = forView
          ? plSale == null
              ? saleId
              : plSale!.title
          : saleId;
    } else if (saleId != null || !forView) {
      map['saleId'] = null;
    }
    if (variationId != null) {
      map['variationId'] = forView
          ? plVariation == null
              ? variationId
              : plVariation!.name
          : variationId;
    } else if (variationId != null || !forView) {
      map['variationId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Sale_item]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Sale_item]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [ref_id, quantity, productId, saleId, variationId, isDeleted];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, ref_id, quantity, productId, saleId, variationId, isDeleted];
  }

  static Future<List<Sale_item>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sale_item.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Sale_item>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Sale_item>[];
    try {
      objList = list
          .map((sale_item) =>
              Sale_item.fromMap(sale_item as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sale_item.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Sale_item>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Sale_item> objList = <Sale_item>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Sale_item.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSale'))) {
          obj.plSale =
              obj.plSale ?? await obj.getSale(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVariation'))) {
          obj.plVariation = obj.plVariation ??
              await obj.getVariation(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Sale_item by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Sale_item] if exist, otherwise returns null
  Future<Sale_item?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Sale_item? obj;
    final data = await _mnSale_item.getById([id]);
    if (data.length != 0) {
      obj = Sale_item.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSale'))) {
          obj.plSale =
              obj.plSale ?? await obj.getSale(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVariation'))) {
          obj.plVariation = obj.plVariation ??
              await obj.getVariation(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Sale_item) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSale_item.insert(this, ignoreBatch);
    } else {
      await _mnSale_item.update(this);
    }

    return id;
  }

  /// Saves the (Sale_item) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSale_item.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSale_item.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Sale_item. Returns a new Primary Key value of Sale_item

  /// <returns>Returns a new Primary Key value of Sale_item
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Sale_item> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Sale_item> sale_items,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in sale_items) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < sale_items.length; i++) {
        if (sale_items[i].id == null) {
          sale_items[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSale_item.rawInsert(
          'INSERT OR REPLACE INTO sale_item (id, ref_id, quantity, productId, saleId, variationId,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [id, ref_id, quantity, productId, saleId, variationId, isDeleted],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Sale_item id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Sale_item id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Sale_item Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Sale_item>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Sale_item> sale_items,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnSale_item.rawInsertAll(
        'INSERT OR REPLACE INTO sale_item (id, ref_id, quantity, productId, saleId, variationId,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        sale_items,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Sale_item

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Sale_item invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSale_item
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSale_item.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Sale_item

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Sale_item invoked (id=$id)');
    {
      return _mnSale_item.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  Sale_itemFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Sale_itemFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Sale_itemFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Sale_itemFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    productId = productId ?? 0;
    saleId = saleId ?? 0;
    variationId = variationId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sale_item

// region Sale_itemField
class Sale_itemField extends FilterBase {
  Sale_itemField(Sale_itemFilterBuilder sale_itemFB) : super(sale_itemFB);

  @override
  Sale_itemFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder isNull() {
    return super.isNull() as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Sale_itemFilterBuilder;
  }

  @override
  Sale_itemField get not {
    return super.not as Sale_itemField;
  }
}
// endregion Sale_itemField

// region Sale_itemFilterBuilder
class Sale_itemFilterBuilder extends ConjunctionBase {
  Sale_itemFilterBuilder(Sale_item obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSale_item = obj._mnSale_item;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Sale_itemManager? _mnSale_item;

  /// put the sql keyword 'AND'
  @override
  Sale_itemFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Sale_itemFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Sale_itemFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Sale_itemFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Sale_itemFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Sale_itemFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Sale_itemFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Sale_itemFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Sale_itemFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Sale_itemFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Sale_itemFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Sale_itemField _setField(
      Sale_itemField? field, String colName, DbType dbtype) {
    return Sale_itemField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Sale_itemField? _id;
  Sale_itemField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Sale_itemField? _ref_id;
  Sale_itemField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  Sale_itemField? _quantity;
  Sale_itemField get quantity {
    return _quantity = _setField(_quantity, 'quantity', DbType.real);
  }

  Sale_itemField? _productId;
  Sale_itemField get productId {
    return _productId = _setField(_productId, 'productId', DbType.integer);
  }

  Sale_itemField? _saleId;
  Sale_itemField get saleId {
    return _saleId = _setField(_saleId, 'saleId', DbType.integer);
  }

  Sale_itemField? _variationId;
  Sale_itemField get variationId {
    return _variationId =
        _setField(_variationId, 'variationId', DbType.integer);
  }

  Sale_itemField? _isDeleted;
  Sale_itemField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Sale_item> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSale_item!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSale_item!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Sale_item> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Sale_item bulk invoked');
    return _mnSale_item!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from sale_item ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSale_item!.updateBatch(qparams, values);
  }

  /// This method always returns [Sale_item] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sale_item?
  @override
  Future<Sale_item?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSale_item!.toList(qparams);
    final data = await objFuture;
    Sale_item? obj;
    if (data.isNotEmpty) {
      obj = Sale_item.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          obj.plProduct =
              obj.plProduct ?? await obj.getProduct(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSale'))) {
          obj.plSale =
              obj.plSale ?? await obj.getSale(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVariation'))) {
          obj.plVariation = obj.plVariation ??
              await obj.getVariation(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Sale_item]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sale_item?
  @override
  Future<Sale_item> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Sale_item();
  }

  /// This method returns int. [Sale_item]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sale_itemCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sale_itemsFuture = await _mnSale_item!.toList(qparams);
    final int count = sale_itemsFuture[0]['CNT'] as int;
    if (sale_itemCount != null) {
      sale_itemCount(count);
    }
    return count;
  }

  /// This method returns List<Sale_item> [Sale_item]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Sale_item>
  @override
  Future<List<Sale_item>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Sale_item> sale_itemsData = await Sale_item.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sale_itemsData;
  }

  /// This method returns Json String [Sale_item]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Sale_item]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Sale_item]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSale_item!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Sale_item]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM sale_item WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSale_item!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Sale_item]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSale_item!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Sale_item.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSale_item!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Sale_itemFilterBuilder

// region Sale_itemFields
class Sale_itemFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fQuantity;
  static TableField get quantity {
    return _fQuantity =
        _fQuantity ?? SqlSyntax.setField(_fQuantity, 'quantity', DbType.real);
  }

  static TableField? _fProductId;
  static TableField get productId {
    return _fProductId = _fProductId ??
        SqlSyntax.setField(_fProductId, 'productId', DbType.integer);
  }

  static TableField? _fSaleId;
  static TableField get saleId {
    return _fSaleId =
        _fSaleId ?? SqlSyntax.setField(_fSaleId, 'saleId', DbType.integer);
  }

  static TableField? _fVariationId;
  static TableField get variationId {
    return _fVariationId = _fVariationId ??
        SqlSyntax.setField(_fVariationId, 'variationId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion Sale_itemFields

//region Sale_itemManager
class Sale_itemManager extends SqfEntityProvider {
  Sale_itemManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sale_item';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Sale_itemManager
// region User
class User extends TableBase {
  User(
      {this.id,
      this.unique_id,
      this.ref_id,
      this.username,
      this.password,
      this.access_token,
      this.refresh_token,
      this.access_token_expiry,
      this.firstname,
      this.surname,
      this.mobile,
      this.email,
      this.user_type,
      this.max_sales_discount_percent,
      this.allow_login,
      this.status,
      this.business_name,
      this.business_id,
      this.default_location_id,
      this.logo,
      this.sell_price_tax,
      this.tax1_id,
      this.tax1_label,
      this.tax1_amount,
      this.tax2_id,
      this.tax2_label,
      this.tax2_amount,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  User.withFields(
      this.unique_id,
      this.ref_id,
      this.username,
      this.password,
      this.access_token,
      this.refresh_token,
      this.access_token_expiry,
      this.firstname,
      this.surname,
      this.mobile,
      this.email,
      this.user_type,
      this.max_sales_discount_percent,
      this.allow_login,
      this.status,
      this.business_name,
      this.business_id,
      this.default_location_id,
      this.logo,
      this.sell_price_tax,
      this.tax1_id,
      this.tax1_label,
      this.tax1_amount,
      this.tax2_id,
      this.tax2_label,
      this.tax2_amount,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  User.withId(
      this.id,
      this.unique_id,
      this.ref_id,
      this.username,
      this.password,
      this.access_token,
      this.refresh_token,
      this.access_token_expiry,
      this.firstname,
      this.surname,
      this.mobile,
      this.email,
      this.user_type,
      this.max_sales_discount_percent,
      this.allow_login,
      this.status,
      this.business_name,
      this.business_id,
      this.default_location_id,
      this.logo,
      this.sell_price_tax,
      this.tax1_id,
      this.tax1_label,
      this.tax1_amount,
      this.tax2_id,
      this.tax2_label,
      this.tax2_amount,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['unique_id'] != null) {
      unique_id = int.tryParse(o['unique_id'].toString());
    }
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['username'] != null) {
      username = o['username'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['access_token'] != null) {
      access_token = o['access_token'].toString();
    }
    if (o['refresh_token'] != null) {
      refresh_token = o['refresh_token'].toString();
    }
    if (o['access_token_expiry'] != null) {
      access_token_expiry =
          int.tryParse(o['access_token_expiry'].toString()) != null
              ? DateTime.fromMillisecondsSinceEpoch(
                  int.tryParse(o['access_token_expiry'].toString())!,
                  isUtc: true)
              : DateTime.tryParse(o['access_token_expiry'].toString());
    }
    if (o['firstname'] != null) {
      firstname = o['firstname'].toString();
    }
    if (o['surname'] != null) {
      surname = o['surname'].toString();
    }
    if (o['mobile'] != null) {
      mobile = o['mobile'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['user_type'] != null) {
      user_type = o['user_type'].toString();
    }
    if (o['max_sales_discount_percent'] != null) {
      max_sales_discount_percent =
          double.tryParse(o['max_sales_discount_percent'].toString());
    }
    if (o['allow_login'] != null) {
      allow_login = o['allow_login'].toString();
    }
    if (o['status'] != null) {
      status = o['status'].toString();
    }
    if (o['business_name'] != null) {
      business_name = o['business_name'].toString();
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['default_location_id'] != null) {
      default_location_id = int.tryParse(o['default_location_id'].toString());
    }
    if (o['logo'] != null) {
      logo = o['logo'].toString();
    }
    if (o['sell_price_tax'] != null) {
      sell_price_tax = o['sell_price_tax'].toString();
    }
    if (o['tax1_id'] != null) {
      tax1_id = int.tryParse(o['tax1_id'].toString());
    }
    if (o['tax1_label'] != null) {
      tax1_label = o['tax1_label'].toString();
    }
    if (o['tax1_amount'] != null) {
      tax1_amount = double.tryParse(o['tax1_amount'].toString());
    }
    if (o['tax2_id'] != null) {
      tax2_id = int.tryParse(o['tax2_id'].toString());
    }
    if (o['tax2_label'] != null) {
      tax2_label = o['tax2_label'].toString();
    }
    if (o['tax2_amount'] != null) {
      tax2_amount = double.tryParse(o['tax2_amount'].toString());
    }
    if (o['custom_field1'] != null) {
      custom_field1 = o['custom_field1'].toString();
    }
    if (o['custom_field2'] != null) {
      custom_field2 = o['custom_field2'].toString();
    }
    if (o['custom_field3'] != null) {
      custom_field3 = o['custom_field3'].toString();
    }
    if (o['custom_field4'] != null) {
      custom_field4 = o['custom_field4'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (User)
  int? id;
  int? unique_id;
  int? ref_id;
  String? username;
  String? password;
  String? access_token;
  String? refresh_token;
  DateTime? access_token_expiry;
  String? firstname;
  String? surname;
  String? mobile;
  String? email;
  String? user_type;
  double? max_sales_discount_percent;
  String? allow_login;
  String? status;
  String? business_name;
  int? business_id;
  int? default_location_id;
  String? logo;
  String? sell_price_tax;
  int? tax1_id;
  String? tax1_label;
  double? tax1_amount;
  int? tax2_id;
  String? tax2_label;
  double? tax2_amount;
  String? custom_field1;
  String? custom_field2;
  String? custom_field3;
  String? custom_field4;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  bool? isDeleted;

  // end FIELDS (User)

// COLLECTIONS & VIRTUALS (User)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plLocations', 'plField2'..]) or so on..
  List<Location>? plLocations;

  /// get Location(s) filtered by id=userId
  LocationFilterBuilder? getLocations(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Location()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .userId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTaxs', 'plField2'..]) or so on..
  List<Tax>? plTaxs;

  /// get Tax(s) filtered by id=userId
  TaxFilterBuilder? getTaxs(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Tax()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .userId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (User)

  static const bool _softDeleteActivated = true;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (username != null || !forView) {
      map['username'] = username;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (access_token != null || !forView) {
      map['access_token'] = access_token;
    }
    if (refresh_token != null || !forView) {
      map['refresh_token'] = refresh_token;
    }
    if (access_token_expiry != null) {
      map['access_token_expiry'] = forJson
          ? access_token_expiry!.toUtc().toString()
          : forQuery
              ? access_token_expiry!.millisecondsSinceEpoch
              : access_token_expiry;
    } else if (access_token_expiry != null || !forView) {
      map['access_token_expiry'] = null;
    }
    if (firstname != null || !forView) {
      map['firstname'] = firstname;
    }
    if (surname != null || !forView) {
      map['surname'] = surname;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (user_type != null || !forView) {
      map['user_type'] = user_type;
    }
    if (max_sales_discount_percent != null || !forView) {
      map['max_sales_discount_percent'] = max_sales_discount_percent;
    }
    if (allow_login != null || !forView) {
      map['allow_login'] = allow_login;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (business_name != null || !forView) {
      map['business_name'] = business_name;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (default_location_id != null || !forView) {
      map['default_location_id'] = default_location_id;
    }
    if (logo != null || !forView) {
      map['logo'] = logo;
    }
    if (sell_price_tax != null || !forView) {
      map['sell_price_tax'] = sell_price_tax;
    }
    if (tax1_id != null || !forView) {
      map['tax1_id'] = tax1_id;
    }
    if (tax1_label != null || !forView) {
      map['tax1_label'] = tax1_label;
    }
    if (tax1_amount != null || !forView) {
      map['tax1_amount'] = tax1_amount;
    }
    if (tax2_id != null || !forView) {
      map['tax2_id'] = tax2_id;
    }
    if (tax2_label != null || !forView) {
      map['tax2_label'] = tax2_label;
    }
    if (tax2_amount != null || !forView) {
      map['tax2_amount'] = tax2_amount;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (unique_id != null || !forView) {
      map['unique_id'] = unique_id;
    }
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (username != null || !forView) {
      map['username'] = username;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (access_token != null || !forView) {
      map['access_token'] = access_token;
    }
    if (refresh_token != null || !forView) {
      map['refresh_token'] = refresh_token;
    }
    if (access_token_expiry != null) {
      map['access_token_expiry'] = forJson
          ? access_token_expiry!.toUtc().toString()
          : forQuery
              ? access_token_expiry!.millisecondsSinceEpoch
              : access_token_expiry;
    } else if (access_token_expiry != null || !forView) {
      map['access_token_expiry'] = null;
    }
    if (firstname != null || !forView) {
      map['firstname'] = firstname;
    }
    if (surname != null || !forView) {
      map['surname'] = surname;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (user_type != null || !forView) {
      map['user_type'] = user_type;
    }
    if (max_sales_discount_percent != null || !forView) {
      map['max_sales_discount_percent'] = max_sales_discount_percent;
    }
    if (allow_login != null || !forView) {
      map['allow_login'] = allow_login;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (business_name != null || !forView) {
      map['business_name'] = business_name;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (default_location_id != null || !forView) {
      map['default_location_id'] = default_location_id;
    }
    if (logo != null || !forView) {
      map['logo'] = logo;
    }
    if (sell_price_tax != null || !forView) {
      map['sell_price_tax'] = sell_price_tax;
    }
    if (tax1_id != null || !forView) {
      map['tax1_id'] = tax1_id;
    }
    if (tax1_label != null || !forView) {
      map['tax1_label'] = tax1_label;
    }
    if (tax1_amount != null || !forView) {
      map['tax1_amount'] = tax1_amount;
    }
    if (tax2_id != null || !forView) {
      map['tax2_id'] = tax2_id;
    }
    if (tax2_label != null || !forView) {
      map['tax2_label'] = tax2_label;
    }
    if (tax2_amount != null || !forView) {
      map['tax2_amount'] = tax2_amount;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (User)
    if (!forQuery) {
      map['Locations'] = await getLocations()!.toMapList();
    }
    if (!forQuery) {
      map['Taxs'] = await getTaxs()!.toMapList();
    }
// END COLLECTIONS (User)

    return map;
  }

  /// This method returns Json String [User]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      unique_id,
      ref_id,
      username,
      password,
      access_token,
      refresh_token,
      access_token_expiry != null
          ? access_token_expiry!.millisecondsSinceEpoch
          : null,
      firstname,
      surname,
      mobile,
      email,
      user_type,
      max_sales_discount_percent,
      allow_login,
      status,
      business_name,
      business_id,
      default_location_id,
      logo,
      sell_price_tax,
      tax1_id,
      tax1_label,
      tax1_amount,
      tax2_id,
      tax2_label,
      tax2_amount,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      unique_id,
      ref_id,
      username,
      password,
      access_token,
      refresh_token,
      access_token_expiry != null
          ? access_token_expiry!.millisecondsSinceEpoch
          : null,
      firstname,
      surname,
      mobile,
      email,
      user_type,
      max_sales_discount_percent,
      allow_login,
      status,
      business_name,
      business_id,
      default_location_id,
      logo,
      sell_price_tax,
      tax1_id,
      tax1_label,
      tax1_amount,
      tax2_id,
      tax2_label,
      tax2_amount,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      isDeleted
    ];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('user.plLocations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plLocations'))) {
          /*_loadedfields!.add('user.plLocations'); */ obj.plLocations =
              obj.plLocations ??
                  await obj.getLocations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('user.plTaxs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTaxs'))) {
          /*_loadedfields!.add('user.plTaxs'); */ obj.plTaxs = obj.plTaxs ??
              await obj.getTaxs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [User] if exist, otherwise returns null
  Future<User?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([id]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('user.plLocations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plLocations'))) {
          /*_loadedfields!.add('user.plLocations'); */ obj.plLocations =
              obj.plLocations ??
                  await obj.getLocations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('user.plTaxs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTaxs'))) {
          /*_loadedfields!.add('user.plTaxs'); */ obj.plTaxs = obj.plTaxs ??
              await obj.getTaxs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await UseridentitySequence().nextVal();

      id = await _mnUser.insert(this, ignoreBatch);
    } else {
      await _mnUser.update(this);
    }

    return id;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      unique_id = await UseridentitySequence().nextVal();

      id = await _mnUser.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUser.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs User. Returns a new Primary Key value of User

  /// <returns>Returns a new Primary Key value of User
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in users) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < users.length; i++) {
        if (users[i].id == null) {
          users[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUser.rawInsert(
          'INSERT OR REPLACE INTO user (id, unique_id, ref_id, username, password, access_token, refresh_token, access_token_expiry, firstname, surname, mobile, email, user_type, max_sales_discount_percent, allow_login, status, business_name, business_id, default_location_id, logo, sell_price_tax, tax1_id, tax1_label, tax1_amount, tax2_id, tax2_label, tax2_amount, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            unique_id,
            ref_id,
            username,
            password,
            access_token,
            refresh_token,
            access_token_expiry != null
                ? access_token_expiry!.millisecondsSinceEpoch
                : null,
            firstname,
            surname,
            mobile,
            email,
            user_type,
            max_sales_discount_percent,
            allow_login,
            status,
            business_name,
            business_id,
            default_location_id,
            logo,
            sell_price_tax,
            tax1_id,
            tax1_label,
            tax1_amount,
            tax2_id,
            tax2_label,
            tax2_amount,
            custom_field1,
            custom_field2,
            custom_field3,
            custom_field4,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'User id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<User>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<User> users,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnUser.rawInsertAll(
        'INSERT OR REPLACE INTO user (id, unique_id, ref_id, username, password, access_token, refresh_token, access_token_expiry, firstname, surname, mobile, email, user_type, max_sales_discount_percent, allow_login, status, business_name, business_id, default_location_id, logo, sell_price_tax, tax1_id, tax1_label, tax1_amount, tax2_id, tax2_label, tax2_amount, custom_field1, custom_field2, custom_field3, custom_field4, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        users,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes User

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete User invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Location().select().userId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Tax().select().userId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover User

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover User invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Location()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .userId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    if (recoverChilds) {
      result = await Tax()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .userId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion user

// region UserField
class UserField extends FilterBase {
  UserField(UserFilterBuilder userFB) : super(userFB);

  @override
  UserFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder isNull() {
    return super.isNull() as UserFilterBuilder;
  }

  @override
  UserFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UserFilterBuilder;
  }

  @override
  UserField get not {
    return super.not as UserField;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends ConjunctionBase {
  UserFilterBuilder(User obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnUser = obj._mnUser;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UserManager? _mnUser;

  /// put the sql keyword 'AND'
  @override
  UserFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UserFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UserFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UserFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UserFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UserFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UserField _setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UserField? _id;
  UserField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  UserField? _unique_id;
  UserField get unique_id {
    return _unique_id = _setField(_unique_id, 'unique_id', DbType.integer);
  }

  UserField? _ref_id;
  UserField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  UserField? _username;
  UserField get username {
    return _username = _setField(_username, 'username', DbType.text);
  }

  UserField? _password;
  UserField get password {
    return _password = _setField(_password, 'password', DbType.text);
  }

  UserField? _access_token;
  UserField get access_token {
    return _access_token =
        _setField(_access_token, 'access_token', DbType.text);
  }

  UserField? _refresh_token;
  UserField get refresh_token {
    return _refresh_token =
        _setField(_refresh_token, 'refresh_token', DbType.text);
  }

  UserField? _access_token_expiry;
  UserField get access_token_expiry {
    return _access_token_expiry = _setField(
        _access_token_expiry, 'access_token_expiry', DbType.datetimeUtc);
  }

  UserField? _firstname;
  UserField get firstname {
    return _firstname = _setField(_firstname, 'firstname', DbType.text);
  }

  UserField? _surname;
  UserField get surname {
    return _surname = _setField(_surname, 'surname', DbType.text);
  }

  UserField? _mobile;
  UserField get mobile {
    return _mobile = _setField(_mobile, 'mobile', DbType.text);
  }

  UserField? _email;
  UserField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  UserField? _user_type;
  UserField get user_type {
    return _user_type = _setField(_user_type, 'user_type', DbType.text);
  }

  UserField? _max_sales_discount_percent;
  UserField get max_sales_discount_percent {
    return _max_sales_discount_percent = _setField(
        _max_sales_discount_percent, 'max_sales_discount_percent', DbType.real);
  }

  UserField? _allow_login;
  UserField get allow_login {
    return _allow_login = _setField(_allow_login, 'allow_login', DbType.text);
  }

  UserField? _status;
  UserField get status {
    return _status = _setField(_status, 'status', DbType.text);
  }

  UserField? _business_name;
  UserField get business_name {
    return _business_name =
        _setField(_business_name, 'business_name', DbType.text);
  }

  UserField? _business_id;
  UserField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  UserField? _default_location_id;
  UserField get default_location_id {
    return _default_location_id =
        _setField(_default_location_id, 'default_location_id', DbType.integer);
  }

  UserField? _logo;
  UserField get logo {
    return _logo = _setField(_logo, 'logo', DbType.text);
  }

  UserField? _sell_price_tax;
  UserField get sell_price_tax {
    return _sell_price_tax =
        _setField(_sell_price_tax, 'sell_price_tax', DbType.text);
  }

  UserField? _tax1_id;
  UserField get tax1_id {
    return _tax1_id = _setField(_tax1_id, 'tax1_id', DbType.integer);
  }

  UserField? _tax1_label;
  UserField get tax1_label {
    return _tax1_label = _setField(_tax1_label, 'tax1_label', DbType.text);
  }

  UserField? _tax1_amount;
  UserField get tax1_amount {
    return _tax1_amount = _setField(_tax1_amount, 'tax1_amount', DbType.real);
  }

  UserField? _tax2_id;
  UserField get tax2_id {
    return _tax2_id = _setField(_tax2_id, 'tax2_id', DbType.integer);
  }

  UserField? _tax2_label;
  UserField get tax2_label {
    return _tax2_label = _setField(_tax2_label, 'tax2_label', DbType.text);
  }

  UserField? _tax2_amount;
  UserField get tax2_amount {
    return _tax2_amount = _setField(_tax2_amount, 'tax2_amount', DbType.real);
  }

  UserField? _custom_field1;
  UserField get custom_field1 {
    return _custom_field1 =
        _setField(_custom_field1, 'custom_field1', DbType.text);
  }

  UserField? _custom_field2;
  UserField get custom_field2 {
    return _custom_field2 =
        _setField(_custom_field2, 'custom_field2', DbType.text);
  }

  UserField? _custom_field3;
  UserField get custom_field3 {
    return _custom_field3 =
        _setField(_custom_field3, 'custom_field3', DbType.text);
  }

  UserField? _custom_field4;
  UserField get custom_field4 {
    return _custom_field4 =
        _setField(_custom_field4, 'custom_field4', DbType.text);
  }

  UserField? _dateAdded;
  UserField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  UserField? _dateUpdated;
  UserField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  UserField? _dateSynced;
  UserField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  UserField? _isSynced;
  UserField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  UserField? _isActive;
  UserField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  UserField? _isCloudActive;
  UserField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  UserField? _isDeleted;
  UserField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Location) according to DeleteRule.CASCADE
    final idListLocationBYuserId = toListPrimaryKeySQL(false);
    final resLocationBYuserId = await Location()
        .select()
        .where('userId IN (${idListLocationBYuserId['sql']})',
            parameterValue: idListLocationBYuserId['args'])
        .delete(hardDelete);
    if (!resLocationBYuserId.success) {
      return resLocationBYuserId;
    }
// Delete sub records where in (Tax) according to DeleteRule.CASCADE
    final idListTaxBYuserId = toListPrimaryKeySQL(false);
    final resTaxBYuserId = await Tax()
        .select()
        .where('userId IN (${idListTaxBYuserId['sql']})',
            parameterValue: idListTaxBYuserId['args'])
        .delete(hardDelete);
    if (!resTaxBYuserId.success) {
      return resTaxBYuserId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUser!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUser!.delete(qparams);
    }
    return r;
  }

  /// Recover List<User> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover User bulk invoked');
    // Recover sub records where in (Location) according to DeleteRule.CASCADE
    final idListLocationBYuserId = toListPrimaryKeySQL(false);
    final resLocationBYuserId = await Location()
        .select()
        .where('userId IN (${idListLocationBYuserId['sql']})',
            parameterValue: idListLocationBYuserId['args'])
        .update({'isDeleted': 0});
    if (!resLocationBYuserId.success) {
      return resLocationBYuserId;
    }
// Recover sub records where in (Tax) according to DeleteRule.CASCADE
    final idListTaxBYuserId = toListPrimaryKeySQL(false);
    final resTaxBYuserId = await Tax()
        .select()
        .where('userId IN (${idListTaxBYuserId['sql']})',
            parameterValue: idListTaxBYuserId['args'])
        .update({'isDeleted': 0});
    if (!resTaxBYuserId.success) {
      return resTaxBYuserId;
    }
    return _mnUser!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from user ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUser!.updateBatch(qparams, values);
  }

  /// This method always returns [User] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUser!.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('user.plLocations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plLocations'))) {
          /*_loadedfields!.add('user.plLocations'); */ obj.plLocations =
              obj.plLocations ??
                  await obj.getLocations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('user.plTaxs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTaxs'))) {
          /*_loadedfields!.add('user.plTaxs'); */ obj.plTaxs = obj.plTaxs ??
              await obj.getTaxs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        User();
  }

  /// This method returns int. [User]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _mnUser!.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<User>
  @override
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUser!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM user WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnUser!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUnique_id;
  static TableField get unique_id {
    return _fUnique_id = _fUnique_id ??
        SqlSyntax.setField(_fUnique_id, 'unique_id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fUsername;
  static TableField get username {
    return _fUsername =
        _fUsername ?? SqlSyntax.setField(_fUsername, 'username', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fAccess_token;
  static TableField get access_token {
    return _fAccess_token = _fAccess_token ??
        SqlSyntax.setField(_fAccess_token, 'access_token', DbType.text);
  }

  static TableField? _fRefresh_token;
  static TableField get refresh_token {
    return _fRefresh_token = _fRefresh_token ??
        SqlSyntax.setField(_fRefresh_token, 'refresh_token', DbType.text);
  }

  static TableField? _fAccess_token_expiry;
  static TableField get access_token_expiry {
    return _fAccess_token_expiry = _fAccess_token_expiry ??
        SqlSyntax.setField(
            _fAccess_token_expiry, 'access_token_expiry', DbType.datetimeUtc);
  }

  static TableField? _fFirstname;
  static TableField get firstname {
    return _fFirstname = _fFirstname ??
        SqlSyntax.setField(_fFirstname, 'firstname', DbType.text);
  }

  static TableField? _fSurname;
  static TableField get surname {
    return _fSurname =
        _fSurname ?? SqlSyntax.setField(_fSurname, 'surname', DbType.text);
  }

  static TableField? _fMobile;
  static TableField get mobile {
    return _fMobile =
        _fMobile ?? SqlSyntax.setField(_fMobile, 'mobile', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fUser_type;
  static TableField get user_type {
    return _fUser_type = _fUser_type ??
        SqlSyntax.setField(_fUser_type, 'user_type', DbType.text);
  }

  static TableField? _fMax_sales_discount_percent;
  static TableField get max_sales_discount_percent {
    return _fMax_sales_discount_percent = _fMax_sales_discount_percent ??
        SqlSyntax.setField(_fMax_sales_discount_percent,
            'max_sales_discount_percent', DbType.real);
  }

  static TableField? _fAllow_login;
  static TableField get allow_login {
    return _fAllow_login = _fAllow_login ??
        SqlSyntax.setField(_fAllow_login, 'allow_login', DbType.text);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.text);
  }

  static TableField? _fBusiness_name;
  static TableField get business_name {
    return _fBusiness_name = _fBusiness_name ??
        SqlSyntax.setField(_fBusiness_name, 'business_name', DbType.text);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fDefault_location_id;
  static TableField get default_location_id {
    return _fDefault_location_id = _fDefault_location_id ??
        SqlSyntax.setField(
            _fDefault_location_id, 'default_location_id', DbType.integer);
  }

  static TableField? _fLogo;
  static TableField get logo {
    return _fLogo = _fLogo ?? SqlSyntax.setField(_fLogo, 'logo', DbType.text);
  }

  static TableField? _fSell_price_tax;
  static TableField get sell_price_tax {
    return _fSell_price_tax = _fSell_price_tax ??
        SqlSyntax.setField(_fSell_price_tax, 'sell_price_tax', DbType.text);
  }

  static TableField? _fTax1_id;
  static TableField get tax1_id {
    return _fTax1_id =
        _fTax1_id ?? SqlSyntax.setField(_fTax1_id, 'tax1_id', DbType.integer);
  }

  static TableField? _fTax1_label;
  static TableField get tax1_label {
    return _fTax1_label = _fTax1_label ??
        SqlSyntax.setField(_fTax1_label, 'tax1_label', DbType.text);
  }

  static TableField? _fTax1_amount;
  static TableField get tax1_amount {
    return _fTax1_amount = _fTax1_amount ??
        SqlSyntax.setField(_fTax1_amount, 'tax1_amount', DbType.real);
  }

  static TableField? _fTax2_id;
  static TableField get tax2_id {
    return _fTax2_id =
        _fTax2_id ?? SqlSyntax.setField(_fTax2_id, 'tax2_id', DbType.integer);
  }

  static TableField? _fTax2_label;
  static TableField get tax2_label {
    return _fTax2_label = _fTax2_label ??
        SqlSyntax.setField(_fTax2_label, 'tax2_label', DbType.text);
  }

  static TableField? _fTax2_amount;
  static TableField get tax2_amount {
    return _fTax2_amount = _fTax2_amount ??
        SqlSyntax.setField(_fTax2_amount, 'tax2_amount', DbType.real);
  }

  static TableField? _fCustom_field1;
  static TableField get custom_field1 {
    return _fCustom_field1 = _fCustom_field1 ??
        SqlSyntax.setField(_fCustom_field1, 'custom_field1', DbType.text);
  }

  static TableField? _fCustom_field2;
  static TableField get custom_field2 {
    return _fCustom_field2 = _fCustom_field2 ??
        SqlSyntax.setField(_fCustom_field2, 'custom_field2', DbType.text);
  }

  static TableField? _fCustom_field3;
  static TableField get custom_field3 {
    return _fCustom_field3 = _fCustom_field3 ??
        SqlSyntax.setField(_fCustom_field3, 'custom_field3', DbType.text);
  }

  static TableField? _fCustom_field4;
  static TableField get custom_field4 {
    return _fCustom_field4 = _fCustom_field4 ??
        SqlSyntax.setField(_fCustom_field4, 'custom_field4', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'user';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion UserManager
// region Location
class Location extends TableBase {
  Location(
      {this.id,
      this.ref_id,
      this.business_id,
      this.location_id,
      this.name,
      this.address,
      this.country,
      this.state,
      this.city,
      this.mobile,
      this.phone,
      this.email,
      this.website,
      this.featured_products,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.payment_methods,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Location.withFields(
      this.ref_id,
      this.business_id,
      this.location_id,
      this.name,
      this.address,
      this.country,
      this.state,
      this.city,
      this.mobile,
      this.phone,
      this.email,
      this.website,
      this.featured_products,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.payment_methods,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Location.withId(
      this.id,
      this.ref_id,
      this.business_id,
      this.location_id,
      this.name,
      this.address,
      this.country,
      this.state,
      this.city,
      this.mobile,
      this.phone,
      this.email,
      this.website,
      this.featured_products,
      this.custom_field1,
      this.custom_field2,
      this.custom_field3,
      this.custom_field4,
      this.payment_methods,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Location.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['location_id'] != null) {
      location_id = o['location_id'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['address'] != null) {
      address = o['address'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['state'] != null) {
      state = o['state'].toString();
    }
    if (o['city'] != null) {
      city = o['city'].toString();
    }
    if (o['mobile'] != null) {
      mobile = o['mobile'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['website'] != null) {
      website = o['website'].toString();
    }
    if (o['featured_products'] != null) {
      featured_products = o['featured_products'].toString();
    }
    if (o['custom_field1'] != null) {
      custom_field1 = o['custom_field1'].toString();
    }
    if (o['custom_field2'] != null) {
      custom_field2 = o['custom_field2'].toString();
    }
    if (o['custom_field3'] != null) {
      custom_field3 = o['custom_field3'].toString();
    }
    if (o['custom_field4'] != null) {
      custom_field4 = o['custom_field4'].toString();
    }
    if (o['payment_methods'] != null) {
      payment_methods = o['payment_methods'].toString();
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    userId = int.tryParse(o['userId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plUser = o['user'] != null
        ? User.fromMap(o['user'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Location)
  int? id;
  int? ref_id;
  int? business_id;
  String? location_id;
  String? name;
  String? address;
  String? country;
  String? state;
  String? city;
  String? mobile;
  String? phone;
  String? email;
  String? website;
  String? featured_products;
  String? custom_field1;
  String? custom_field2;
  String? custom_field3;
  String? custom_field4;
  String? payment_methods;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  int? userId;
  bool? isDeleted;

  // end FIELDS (Location)

// RELATIONSHIPS (Location)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUser', 'plField2'..]) or so on..
  User? plUser;

  /// get User By UserId
  Future<User?> getUser(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await User()
        .getById(userId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Location)

  static const bool _softDeleteActivated = true;
  LocationManager? __mnLocation;

  LocationManager get _mnLocation {
    return __mnLocation = __mnLocation ?? LocationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (location_id != null || !forView) {
      map['location_id'] = location_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (address != null || !forView) {
      map['address'] = address;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (website != null || !forView) {
      map['website'] = website;
    }
    if (featured_products != null || !forView) {
      map['featured_products'] = featured_products;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (payment_methods != null || !forView) {
      map['payment_methods'] = payment_methods;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (userId != null) {
      map['userId'] = forView
          ? plUser == null
              ? userId
              : plUser!.username
          : userId;
    } else if (userId != null || !forView) {
      map['userId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (location_id != null || !forView) {
      map['location_id'] = location_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (address != null || !forView) {
      map['address'] = address;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (mobile != null || !forView) {
      map['mobile'] = mobile;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (website != null || !forView) {
      map['website'] = website;
    }
    if (featured_products != null || !forView) {
      map['featured_products'] = featured_products;
    }
    if (custom_field1 != null || !forView) {
      map['custom_field1'] = custom_field1;
    }
    if (custom_field2 != null || !forView) {
      map['custom_field2'] = custom_field2;
    }
    if (custom_field3 != null || !forView) {
      map['custom_field3'] = custom_field3;
    }
    if (custom_field4 != null || !forView) {
      map['custom_field4'] = custom_field4;
    }
    if (payment_methods != null || !forView) {
      map['payment_methods'] = payment_methods;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (userId != null) {
      map['userId'] = forView
          ? plUser == null
              ? userId
              : plUser!.username
          : userId;
    } else if (userId != null || !forView) {
      map['userId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Location]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Location]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      ref_id,
      business_id,
      location_id,
      name,
      address,
      country,
      state,
      city,
      mobile,
      phone,
      email,
      website,
      featured_products,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      payment_methods,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      userId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      ref_id,
      business_id,
      location_id,
      name,
      address,
      country,
      state,
      city,
      mobile,
      phone,
      email,
      website,
      featured_products,
      custom_field1,
      custom_field2,
      custom_field3,
      custom_field4,
      payment_methods,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      userId,
      isDeleted
    ];
  }

  static Future<List<Location>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Location.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Location>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Location>[];
    try {
      objList = list
          .map((location) => Location.fromMap(location as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Location.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Location>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Location> objList = <Location>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Location.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Location by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Location] if exist, otherwise returns null
  Future<Location?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Location? obj;
    final data = await _mnLocation.getById([id]);
    if (data.length != 0) {
      obj = Location.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Location) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnLocation.insert(this, ignoreBatch);
    } else {
      await _mnLocation.update(this);
    }

    return id;
  }

  /// Saves the (Location) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnLocation.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Location. Returns a new Primary Key value of Location

  /// <returns>Returns a new Primary Key value of Location
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Location> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Location> locations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in locations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < locations.length; i++) {
        if (locations[i].id == null) {
          locations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnLocation.rawInsert(
          'INSERT OR REPLACE INTO location (id, ref_id, business_id, location_id, name, address, country, state, city, mobile, phone, email, website, featured_products, custom_field1, custom_field2, custom_field3, custom_field4, payment_methods, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, userId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            ref_id,
            business_id,
            location_id,
            name,
            address,
            country,
            state,
            city,
            mobile,
            phone,
            email,
            website,
            featured_products,
            custom_field1,
            custom_field2,
            custom_field3,
            custom_field4,
            payment_methods,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            userId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Location id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Location id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Location Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Location>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Location> locations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnLocation.rawInsertAll(
        'INSERT OR REPLACE INTO location (id, ref_id, business_id, location_id, name, address, country, state, city, mobile, phone, email, website, featured_products, custom_field1, custom_field2, custom_field3, custom_field4, payment_methods, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, userId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        locations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Location

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Location invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnLocation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Location

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Location invoked (id=$id)');
    {
      return _mnLocation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  LocationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  LocationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    userId = userId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion location

// region LocationField
class LocationField extends FilterBase {
  LocationField(LocationFilterBuilder locationFB) : super(locationFB);

  @override
  LocationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder isNull() {
    return super.isNull() as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as LocationFilterBuilder;
  }

  @override
  LocationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as LocationFilterBuilder;
  }

  @override
  LocationField get not {
    return super.not as LocationField;
  }
}
// endregion LocationField

// region LocationFilterBuilder
class LocationFilterBuilder extends ConjunctionBase {
  LocationFilterBuilder(Location obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnLocation = obj._mnLocation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  LocationManager? _mnLocation;

  /// put the sql keyword 'AND'
  @override
  LocationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  LocationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  LocationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  LocationFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  LocationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  LocationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  LocationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  LocationField _setField(LocationField? field, String colName, DbType dbtype) {
    return LocationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  LocationField? _id;
  LocationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  LocationField? _ref_id;
  LocationField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  LocationField? _business_id;
  LocationField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  LocationField? _location_id;
  LocationField get location_id {
    return _location_id = _setField(_location_id, 'location_id', DbType.text);
  }

  LocationField? _name;
  LocationField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  LocationField? _address;
  LocationField get address {
    return _address = _setField(_address, 'address', DbType.text);
  }

  LocationField? _country;
  LocationField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  LocationField? _state;
  LocationField get state {
    return _state = _setField(_state, 'state', DbType.text);
  }

  LocationField? _city;
  LocationField get city {
    return _city = _setField(_city, 'city', DbType.text);
  }

  LocationField? _mobile;
  LocationField get mobile {
    return _mobile = _setField(_mobile, 'mobile', DbType.text);
  }

  LocationField? _phone;
  LocationField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  LocationField? _email;
  LocationField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  LocationField? _website;
  LocationField get website {
    return _website = _setField(_website, 'website', DbType.text);
  }

  LocationField? _featured_products;
  LocationField get featured_products {
    return _featured_products =
        _setField(_featured_products, 'featured_products', DbType.text);
  }

  LocationField? _custom_field1;
  LocationField get custom_field1 {
    return _custom_field1 =
        _setField(_custom_field1, 'custom_field1', DbType.text);
  }

  LocationField? _custom_field2;
  LocationField get custom_field2 {
    return _custom_field2 =
        _setField(_custom_field2, 'custom_field2', DbType.text);
  }

  LocationField? _custom_field3;
  LocationField get custom_field3 {
    return _custom_field3 =
        _setField(_custom_field3, 'custom_field3', DbType.text);
  }

  LocationField? _custom_field4;
  LocationField get custom_field4 {
    return _custom_field4 =
        _setField(_custom_field4, 'custom_field4', DbType.text);
  }

  LocationField? _payment_methods;
  LocationField get payment_methods {
    return _payment_methods =
        _setField(_payment_methods, 'payment_methods', DbType.text);
  }

  LocationField? _dateAdded;
  LocationField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  LocationField? _dateUpdated;
  LocationField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  LocationField? _dateSynced;
  LocationField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  LocationField? _isSynced;
  LocationField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  LocationField? _isActive;
  LocationField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  LocationField? _isCloudActive;
  LocationField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  LocationField? _userId;
  LocationField get userId {
    return _userId = _setField(_userId, 'userId', DbType.integer);
  }

  LocationField? _isDeleted;
  LocationField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Location> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnLocation!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnLocation!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Location> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Location bulk invoked');
    return _mnLocation!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from location ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnLocation!.updateBatch(qparams, values);
  }

  /// This method always returns [Location] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Location?
  @override
  Future<Location?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnLocation!.toList(qparams);
    final data = await objFuture;
    Location? obj;
    if (data.isNotEmpty) {
      obj = Location.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Location]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Location?
  @override
  Future<Location> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Location();
  }

  /// This method returns int. [Location]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? locationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final locationsFuture = await _mnLocation!.toList(qparams);
    final int count = locationsFuture[0]['CNT'] as int;
    if (locationCount != null) {
      locationCount(count);
    }
    return count;
  }

  /// This method returns List<Location> [Location]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Location>
  @override
  Future<List<Location>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Location> locationsData = await Location.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return locationsData;
  }

  /// This method returns Json String [Location]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Location]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Location]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnLocation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Location]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM location WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnLocation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Location]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnLocation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Location.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnLocation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocationFilterBuilder

// region LocationFields
class LocationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fLocation_id;
  static TableField get location_id {
    return _fLocation_id = _fLocation_id ??
        SqlSyntax.setField(_fLocation_id, 'location_id', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fAddress;
  static TableField get address {
    return _fAddress =
        _fAddress ?? SqlSyntax.setField(_fAddress, 'address', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fState;
  static TableField get state {
    return _fState =
        _fState ?? SqlSyntax.setField(_fState, 'state', DbType.text);
  }

  static TableField? _fCity;
  static TableField get city {
    return _fCity = _fCity ?? SqlSyntax.setField(_fCity, 'city', DbType.text);
  }

  static TableField? _fMobile;
  static TableField get mobile {
    return _fMobile =
        _fMobile ?? SqlSyntax.setField(_fMobile, 'mobile', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fWebsite;
  static TableField get website {
    return _fWebsite =
        _fWebsite ?? SqlSyntax.setField(_fWebsite, 'website', DbType.text);
  }

  static TableField? _fFeatured_products;
  static TableField get featured_products {
    return _fFeatured_products = _fFeatured_products ??
        SqlSyntax.setField(
            _fFeatured_products, 'featured_products', DbType.text);
  }

  static TableField? _fCustom_field1;
  static TableField get custom_field1 {
    return _fCustom_field1 = _fCustom_field1 ??
        SqlSyntax.setField(_fCustom_field1, 'custom_field1', DbType.text);
  }

  static TableField? _fCustom_field2;
  static TableField get custom_field2 {
    return _fCustom_field2 = _fCustom_field2 ??
        SqlSyntax.setField(_fCustom_field2, 'custom_field2', DbType.text);
  }

  static TableField? _fCustom_field3;
  static TableField get custom_field3 {
    return _fCustom_field3 = _fCustom_field3 ??
        SqlSyntax.setField(_fCustom_field3, 'custom_field3', DbType.text);
  }

  static TableField? _fCustom_field4;
  static TableField get custom_field4 {
    return _fCustom_field4 = _fCustom_field4 ??
        SqlSyntax.setField(_fCustom_field4, 'custom_field4', DbType.text);
  }

  static TableField? _fPayment_methods;
  static TableField get payment_methods {
    return _fPayment_methods = _fPayment_methods ??
        SqlSyntax.setField(_fPayment_methods, 'payment_methods', DbType.text);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion LocationFields

//region LocationManager
class LocationManager extends SqfEntityProvider {
  LocationManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'location';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion LocationManager
// region Tax
class Tax extends TableBase {
  Tax(
      {this.id,
      this.ref_id,
      this.business_id,
      this.name,
      this.amount,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Tax.withFields(
      this.ref_id,
      this.business_id,
      this.name,
      this.amount,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Tax.withId(
      this.id,
      this.ref_id,
      this.business_id,
      this.name,
      this.amount,
      this.dateAdded,
      this.dateUpdated,
      this.dateSynced,
      this.isSynced,
      this.isActive,
      this.isCloudActive,
      this.userId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tax.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['ref_id'] != null) {
      ref_id = int.tryParse(o['ref_id'].toString());
    }
    if (o['business_id'] != null) {
      business_id = int.tryParse(o['business_id'].toString());
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['amount'] != null) {
      amount = double.tryParse(o['amount'].toString());
    }
    if (o['dateAdded'] != null) {
      dateAdded = int.tryParse(o['dateAdded'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateAdded'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateAdded'].toString());
    }
    if (o['dateUpdated'] != null) {
      dateUpdated = int.tryParse(o['dateUpdated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateUpdated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateUpdated'].toString());
    }
    if (o['dateSynced'] != null) {
      dateSynced = int.tryParse(o['dateSynced'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateSynced'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['dateSynced'].toString());
    }
    if (o['isSynced'] != null) {
      isSynced =
          o['isSynced'].toString() == '1' || o['isSynced'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['isCloudActive'] != null) {
      isCloudActive = o['isCloudActive'].toString() == '1' ||
          o['isCloudActive'].toString() == 'true';
    }
    userId = int.tryParse(o['userId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plUser = o['user'] != null
        ? User.fromMap(o['user'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Tax)
  int? id;
  int? ref_id;
  int? business_id;
  String? name;
  double? amount;
  DateTime? dateAdded;
  DateTime? dateUpdated;
  DateTime? dateSynced;
  bool? isSynced;
  bool? isActive;
  bool? isCloudActive;
  int? userId;
  bool? isDeleted;

  // end FIELDS (Tax)

// RELATIONSHIPS (Tax)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUser', 'plField2'..]) or so on..
  User? plUser;

  /// get User By UserId
  Future<User?> getUser(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await User()
        .getById(userId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Tax)

// COLLECTIONS & VIRTUALS (Tax)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSales', 'plField2'..]) or so on..
  List<Sale>? plSales;

  /// get Sale(s) filtered by id=taxId
  SaleFilterBuilder? getSales(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sale()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .taxId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Tax)

  static const bool _softDeleteActivated = true;
  TaxManager? __mnTax;

  TaxManager get _mnTax {
    return __mnTax = __mnTax ?? TaxManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (userId != null) {
      map['userId'] = forView
          ? plUser == null
              ? userId
              : plUser!.username
          : userId;
    } else if (userId != null || !forView) {
      map['userId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (ref_id != null || !forView) {
      map['ref_id'] = ref_id;
    }
    if (business_id != null || !forView) {
      map['business_id'] = business_id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (dateAdded != null) {
      map['dateAdded'] = forJson
          ? dateAdded!.toUtc().toString()
          : forQuery
              ? dateAdded!.millisecondsSinceEpoch
              : dateAdded;
    } else if (dateAdded != null || !forView) {
      map['dateAdded'] = null;
    }
    if (dateUpdated != null) {
      map['dateUpdated'] = forJson
          ? dateUpdated!.toUtc().toString()
          : forQuery
              ? dateUpdated!.millisecondsSinceEpoch
              : dateUpdated;
    } else if (dateUpdated != null || !forView) {
      map['dateUpdated'] = null;
    }
    if (dateSynced != null) {
      map['dateSynced'] = forJson
          ? dateSynced!.toUtc().toString()
          : forQuery
              ? dateSynced!.millisecondsSinceEpoch
              : dateSynced;
    } else if (dateSynced != null || !forView) {
      map['dateSynced'] = null;
    }
    if (isSynced != null) {
      map['isSynced'] = forQuery ? (isSynced! ? 1 : 0) : isSynced;
    } else if (isSynced != null || !forView) {
      map['isSynced'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isCloudActive != null) {
      map['isCloudActive'] =
          forQuery ? (isCloudActive! ? 1 : 0) : isCloudActive;
    } else if (isCloudActive != null || !forView) {
      map['isCloudActive'] = null;
    }
    if (userId != null) {
      map['userId'] = forView
          ? plUser == null
              ? userId
              : plUser!.username
          : userId;
    } else if (userId != null || !forView) {
      map['userId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Tax)
    if (!forQuery) {
      map['Sales'] = await getSales()!.toMapList();
    }
// END COLLECTIONS (Tax)

    return map;
  }

  /// This method returns Json String [Tax]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tax]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      ref_id,
      business_id,
      name,
      amount,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      userId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      ref_id,
      business_id,
      name,
      amount,
      dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
      dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
      dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
      isSynced,
      isActive,
      isCloudActive,
      userId,
      isDeleted
    ];
  }

  static Future<List<Tax>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tax.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tax>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tax>[];
    try {
      objList =
          list.map((tax) => Tax.fromMap(tax as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR Tax.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tax>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tax> objList = <Tax>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tax.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tax.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('tax.plSales'); */ obj.plSales = obj.plSales ??
              await obj.getSales()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tax by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tax] if exist, otherwise returns null
  Future<Tax?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tax? obj;
    final data = await _mnTax.getById([id]);
    if (data.length != 0) {
      obj = Tax.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tax.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('tax.plSales'); */ obj.plSales = obj.plSales ??
              await obj.getSales()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tax) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTax.insert(this, ignoreBatch);
    } else {
      await _mnTax.update(this);
    }

    return id;
  }

  /// Saves the (Tax) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTax.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTax.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tax. Returns a new Primary Key value of Tax

  /// <returns>Returns a new Primary Key value of Tax
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tax> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tax> taxs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OrbiterDbModel().batchStart();
    for (final obj in taxs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OrbiterDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < taxs.length; i++) {
        if (taxs[i].id == null) {
          taxs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTax.rawInsert(
          'INSERT OR REPLACE INTO tax (id, ref_id, business_id, name, amount, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, userId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            ref_id,
            business_id,
            name,
            amount,
            dateAdded != null ? dateAdded!.millisecondsSinceEpoch : null,
            dateUpdated != null ? dateUpdated!.millisecondsSinceEpoch : null,
            dateSynced != null ? dateSynced!.millisecondsSinceEpoch : null,
            isSynced,
            isActive,
            isCloudActive,
            userId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Tax id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tax id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tax Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tax>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tax> taxs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTax.rawInsertAll(
        'INSERT OR REPLACE INTO tax (id, ref_id, business_id, name, amount, dateAdded, dateUpdated, dateSynced, isSynced, isActive, isCloudActive, userId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
        taxs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tax

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tax invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Sale().select().taxId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTax
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTax.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Tax

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Tax invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Sale()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .taxId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnTax.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TaxFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TaxFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TaxFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TaxFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSynced = isSynced ?? false;
    isActive = isActive ?? true;
    isCloudActive = isCloudActive ?? true;
    userId = userId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tax

// region TaxField
class TaxField extends FilterBase {
  TaxField(TaxFilterBuilder taxFB) : super(taxFB);

  @override
  TaxFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder isNull() {
    return super.isNull() as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TaxFilterBuilder;
  }

  @override
  TaxFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TaxFilterBuilder;
  }

  @override
  TaxField get not {
    return super.not as TaxField;
  }
}
// endregion TaxField

// region TaxFilterBuilder
class TaxFilterBuilder extends ConjunctionBase {
  TaxFilterBuilder(Tax obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTax = obj._mnTax;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TaxManager? _mnTax;

  /// put the sql keyword 'AND'
  @override
  TaxFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TaxFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TaxFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TaxFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TaxFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TaxFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TaxFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TaxFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TaxFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TaxFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TaxFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TaxField _setField(TaxField? field, String colName, DbType dbtype) {
    return TaxField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TaxField? _id;
  TaxField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TaxField? _ref_id;
  TaxField get ref_id {
    return _ref_id = _setField(_ref_id, 'ref_id', DbType.integer);
  }

  TaxField? _business_id;
  TaxField get business_id {
    return _business_id =
        _setField(_business_id, 'business_id', DbType.integer);
  }

  TaxField? _name;
  TaxField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  TaxField? _amount;
  TaxField get amount {
    return _amount = _setField(_amount, 'amount', DbType.real);
  }

  TaxField? _dateAdded;
  TaxField get dateAdded {
    return _dateAdded = _setField(_dateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  TaxField? _dateUpdated;
  TaxField get dateUpdated {
    return _dateUpdated =
        _setField(_dateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  TaxField? _dateSynced;
  TaxField get dateSynced {
    return _dateSynced =
        _setField(_dateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  TaxField? _isSynced;
  TaxField get isSynced {
    return _isSynced = _setField(_isSynced, 'isSynced', DbType.bool);
  }

  TaxField? _isActive;
  TaxField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  TaxField? _isCloudActive;
  TaxField get isCloudActive {
    return _isCloudActive =
        _setField(_isCloudActive, 'isCloudActive', DbType.bool);
  }

  TaxField? _userId;
  TaxField get userId {
    return _userId = _setField(_userId, 'userId', DbType.integer);
  }

  TaxField? _isDeleted;
  TaxField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Tax> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Sale) according to DeleteRule.CASCADE
    final idListSaleBYtaxId = toListPrimaryKeySQL(false);
    final resSaleBYtaxId = await Sale()
        .select()
        .where('taxId IN (${idListSaleBYtaxId['sql']})',
            parameterValue: idListSaleBYtaxId['args'])
        .delete(hardDelete);
    if (!resSaleBYtaxId.success) {
      return resSaleBYtaxId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTax!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTax!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Tax> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Tax bulk invoked');
    // Recover sub records where in (Sale) according to DeleteRule.CASCADE
    final idListSaleBYtaxId = toListPrimaryKeySQL(false);
    final resSaleBYtaxId = await Sale()
        .select()
        .where('taxId IN (${idListSaleBYtaxId['sql']})',
            parameterValue: idListSaleBYtaxId['args'])
        .update({'isDeleted': 0});
    if (!resSaleBYtaxId.success) {
      return resSaleBYtaxId;
    }
    return _mnTax!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tax ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTax!.updateBatch(qparams, values);
  }

  /// This method always returns [Tax] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tax?
  @override
  Future<Tax?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTax!.toList(qparams);
    final data = await objFuture;
    Tax? obj;
    if (data.isNotEmpty) {
      obj = Tax.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tax.plSales') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSales'))) {
          /*_loadedfields!.add('tax.plSales'); */ obj.plSales = obj.plSales ??
              await obj.getSales()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          obj.plUser =
              obj.plUser ?? await obj.getUser(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tax]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tax?
  @override
  Future<Tax> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tax();
  }

  /// This method returns int. [Tax]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? taxCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final taxsFuture = await _mnTax!.toList(qparams);
    final int count = taxsFuture[0]['CNT'] as int;
    if (taxCount != null) {
      taxCount(count);
    }
    return count;
  }

  /// This method returns List<Tax> [Tax]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tax>
  @override
  Future<List<Tax>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tax> taxsData = await Tax.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return taxsData;
  }

  /// This method returns Json String [Tax]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tax]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tax]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTax!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tax]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tax WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTax!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tax]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTax!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tax.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTax!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TaxFilterBuilder

// region TaxFields
class TaxFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fRef_id;
  static TableField get ref_id {
    return _fRef_id =
        _fRef_id ?? SqlSyntax.setField(_fRef_id, 'ref_id', DbType.integer);
  }

  static TableField? _fBusiness_id;
  static TableField get business_id {
    return _fBusiness_id = _fBusiness_id ??
        SqlSyntax.setField(_fBusiness_id, 'business_id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.real);
  }

  static TableField? _fDateAdded;
  static TableField get dateAdded {
    return _fDateAdded = _fDateAdded ??
        SqlSyntax.setField(_fDateAdded, 'dateAdded', DbType.datetimeUtc);
  }

  static TableField? _fDateUpdated;
  static TableField get dateUpdated {
    return _fDateUpdated = _fDateUpdated ??
        SqlSyntax.setField(_fDateUpdated, 'dateUpdated', DbType.datetimeUtc);
  }

  static TableField? _fDateSynced;
  static TableField get dateSynced {
    return _fDateSynced = _fDateSynced ??
        SqlSyntax.setField(_fDateSynced, 'dateSynced', DbType.datetimeUtc);
  }

  static TableField? _fIsSynced;
  static TableField get isSynced {
    return _fIsSynced =
        _fIsSynced ?? SqlSyntax.setField(_fIsSynced, 'isSynced', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsCloudActive;
  static TableField get isCloudActive {
    return _fIsCloudActive = _fIsCloudActive ??
        SqlSyntax.setField(_fIsCloudActive, 'isCloudActive', DbType.bool);
  }

  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TaxFields

//region TaxManager
class TaxManager extends SqfEntityProvider {
  TaxManager()
      : super(OrbiterDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tax';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TaxManager
/// Region SEQUENCE SalesidentitySequence
class SalesidentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceSalesidentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceSalesidentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager().sequence(
        SequenceSalesidentitySequence.getInstance, false,
        reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE SalesidentitySequence

/// Region SEQUENCE ProductidentitySequence
class ProductidentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceProductidentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceProductidentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager().sequence(
        SequenceProductidentitySequence.getInstance, false,
        reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE ProductidentitySequence

/// Region SEQUENCE CustomeridentitySequence
class CustomeridentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceCustomeridentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceCustomeridentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager().sequence(
        SequenceCustomeridentitySequence.getInstance, false,
        reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE CustomeridentitySequence

/// Region SEQUENCE UseridentitySequence
class UseridentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceUseridentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceUseridentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await OrbiterDbModelSequenceManager()
        .sequence(SequenceUseridentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE UseridentitySequence

class OrbiterDbModelSequenceManager extends SqfEntityProvider {
  OrbiterDbModelSequenceManager() : super(OrbiterDbModel());
}
// END OF ENTITIES
